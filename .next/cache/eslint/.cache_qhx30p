[{"/Users/mac/Documents/Medbox-Client/pages/404.js":"1","/Users/mac/Documents/Medbox-Client/pages/_app.js":"2","/Users/mac/Documents/Medbox-Client/pages/admin/adminDetailProduct/[product_id].js":"3","/Users/mac/Documents/Medbox-Client/pages/admin/category/[params].js":"4","/Users/mac/Documents/Medbox-Client/pages/admin/category/index.js":"5","/Users/mac/Documents/Medbox-Client/pages/admin/index.js":"6","/Users/mac/Documents/Medbox-Client/pages/admin/inventory/[params].js":"7","/Users/mac/Documents/Medbox-Client/pages/admin/inventory/index.js":"8","/Users/mac/Documents/Medbox-Client/pages/admin/laporan/[params].js":"9","/Users/mac/Documents/Medbox-Client/pages/admin/laporan/index.js":"10","/Users/mac/Documents/Medbox-Client/pages/admin/resep.js":"11","/Users/mac/Documents/Medbox-Client/pages/admin/transaksi.js":"12","/Users/mac/Documents/Medbox-Client/pages/api/auth/[...nextauth].js":"13","/Users/mac/Documents/Medbox-Client/pages/api/hello.js":"14","/Users/mac/Documents/Medbox-Client/pages/cart/[user_id].js":"15","/Users/mac/Documents/Medbox-Client/pages/change-password/index.js":"16","/Users/mac/Documents/Medbox-Client/pages/detailPage/[product_id].js":"17","/Users/mac/Documents/Medbox-Client/pages/forgotPassword.js":"18","/Users/mac/Documents/Medbox-Client/pages/index.js":"19","/Users/mac/Documents/Medbox-Client/pages/login.js":"20","/Users/mac/Documents/Medbox-Client/pages/productCatalog/[params].js":"21","/Users/mac/Documents/Medbox-Client/pages/productCatalog/index.js":"22","/Users/mac/Documents/Medbox-Client/pages/profile/edit.js":"23","/Users/mac/Documents/Medbox-Client/pages/profile/index.js":"24","/Users/mac/Documents/Medbox-Client/pages/register.js":"25","/Users/mac/Documents/Medbox-Client/pages/resetPassword/[token].js":"26","/Users/mac/Documents/Medbox-Client/pages/transaction/[user_id].js":"27","/Users/mac/Documents/Medbox-Client/pages/transaction/index.js":"28","/Users/mac/Documents/Medbox-Client/pages/transactionDetail/[transaction_id].js":"29","/Users/mac/Documents/Medbox-Client/pages/upload-prescription-image/index.js":"30","/Users/mac/Documents/Medbox-Client/components/AddAddress/index.js":"31","/Users/mac/Documents/Medbox-Client/components/AddCategoryModal/index.js":"32","/Users/mac/Documents/Medbox-Client/components/AddFormulaModal/index.js":"33","/Users/mac/Documents/Medbox-Client/components/AddProductModal/index.js":"34","/Users/mac/Documents/Medbox-Client/components/AddProductStock/index.js":"35","/Users/mac/Documents/Medbox-Client/components/AdminDetailTrans/index.js":"36","/Users/mac/Documents/Medbox-Client/components/AdminNavbar/index.js":"37","/Users/mac/Documents/Medbox-Client/components/AdminPaymentConfirm/index.js":"38","/Users/mac/Documents/Medbox-Client/components/AdminPaymentDetails/index.js":"39","/Users/mac/Documents/Medbox-Client/components/AdminPrescripCard/index.js":"40","/Users/mac/Documents/Medbox-Client/components/AdminTransCard/index.js":"41","/Users/mac/Documents/Medbox-Client/components/AdminTransCardConfirmation/index.js":"42","/Users/mac/Documents/Medbox-Client/components/CartCards/index.js":"43","/Users/mac/Documents/Medbox-Client/components/DeleteAddedStock/index.js":"44","/Users/mac/Documents/Medbox-Client/components/DeleteAddress/index.js":"45","/Users/mac/Documents/Medbox-Client/components/EditAddress/index.js":"46","/Users/mac/Documents/Medbox-Client/components/GetDeliveryCost/index.js":"47","/Users/mac/Documents/Medbox-Client/components/Navbar/index.js":"48","/Users/mac/Documents/Medbox-Client/components/SelectAddress/index.js":"49","/Users/mac/Documents/Medbox-Client/components/TransDetailCard/index.js":"50","/Users/mac/Documents/Medbox-Client/components/TransactionCards/index.js":"51","/Users/mac/Documents/Medbox-Client/components/UpdateAddedStock/index.js":"52","/Users/mac/Documents/Medbox-Client/components/adminProductDetails/index.js":"53","/Users/mac/Documents/Medbox-Client/components/editCategoryModal/index.js":"54","/Users/mac/Documents/Medbox-Client/components/editProductModal/index.js":"55","/Users/mac/Documents/Medbox-Client/components/textFieldProfile/index.js":"56","/Users/mac/Documents/Medbox-Client/components/textfield/index.js":"57","/Users/mac/Documents/Medbox-Client/components/theme/index.js":"58","/Users/mac/Documents/Medbox-Client/src/config/api.js":"59"},{"size":1076,"mtime":1667117323173,"results":"60","hashOfConfig":"61"},{"size":1063,"mtime":1667554613159,"results":"62","hashOfConfig":"61"},{"size":8489,"mtime":1667117323174,"results":"63","hashOfConfig":"61"},{"size":6816,"mtime":1667117323174,"results":"64","hashOfConfig":"61"},{"size":256,"mtime":1667117323175,"results":"65","hashOfConfig":"61"},{"size":613,"mtime":1667117323175,"results":"66","hashOfConfig":"61"},{"size":18606,"mtime":1667117323175,"results":"67","hashOfConfig":"61"},{"size":741,"mtime":1667117323175,"results":"68","hashOfConfig":"61"},{"size":13734,"mtime":1667117323176,"results":"69","hashOfConfig":"61"},{"size":317,"mtime":1667117323176,"results":"70","hashOfConfig":"61"},{"size":4681,"mtime":1667117323177,"results":"71","hashOfConfig":"61"},{"size":10870,"mtime":1667117323177,"results":"72","hashOfConfig":"61"},{"size":904,"mtime":1667117323178,"results":"73","hashOfConfig":"61"},{"size":170,"mtime":1667117323178,"results":"74","hashOfConfig":"61"},{"size":13794,"mtime":1667117323178,"results":"75","hashOfConfig":"61"},{"size":6033,"mtime":1667117323179,"results":"76","hashOfConfig":"61"},{"size":6005,"mtime":1667117323179,"results":"77","hashOfConfig":"61"},{"size":3311,"mtime":1667117323179,"results":"78","hashOfConfig":"61"},{"size":10527,"mtime":1667126238627,"results":"79","hashOfConfig":"61"},{"size":4739,"mtime":1667554662714,"results":"80","hashOfConfig":"61"},{"size":15883,"mtime":1667117323181,"results":"81","hashOfConfig":"61"},{"size":263,"mtime":1667117323181,"results":"82","hashOfConfig":"61"},{"size":9997,"mtime":1667117323182,"results":"83","hashOfConfig":"61"},{"size":20110,"mtime":1667117323182,"results":"84","hashOfConfig":"61"},{"size":8881,"mtime":1667117323183,"results":"85","hashOfConfig":"61"},{"size":4354,"mtime":1667117323183,"results":"86","hashOfConfig":"61"},{"size":5836,"mtime":1667117323184,"results":"87","hashOfConfig":"61"},{"size":474,"mtime":1667117323184,"results":"88","hashOfConfig":"61"},{"size":9699,"mtime":1667117323185,"results":"89","hashOfConfig":"61"},{"size":16853,"mtime":1667117323185,"results":"90","hashOfConfig":"61"},{"size":6292,"mtime":1667117323162,"results":"91","hashOfConfig":"61"},{"size":4544,"mtime":1667117323163,"results":"92","hashOfConfig":"61"},{"size":10019,"mtime":1667117323163,"results":"93","hashOfConfig":"61"},{"size":7926,"mtime":1667117323163,"results":"94","hashOfConfig":"61"},{"size":2884,"mtime":1667117323164,"results":"95","hashOfConfig":"61"},{"size":3102,"mtime":1667117323164,"results":"96","hashOfConfig":"61"},{"size":2250,"mtime":1667117323164,"results":"97","hashOfConfig":"61"},{"size":5341,"mtime":1667117323165,"results":"98","hashOfConfig":"61"},{"size":1057,"mtime":1667117323165,"results":"99","hashOfConfig":"61"},{"size":4745,"mtime":1667117323165,"results":"100","hashOfConfig":"61"},{"size":2527,"mtime":1667117323166,"results":"101","hashOfConfig":"61"},{"size":4496,"mtime":1667117323166,"results":"102","hashOfConfig":"61"},{"size":4759,"mtime":1667117323167,"results":"103","hashOfConfig":"61"},{"size":2586,"mtime":1667117323167,"results":"104","hashOfConfig":"61"},{"size":2212,"mtime":1667117323168,"results":"105","hashOfConfig":"61"},{"size":6531,"mtime":1667117323168,"results":"106","hashOfConfig":"61"},{"size":4192,"mtime":1667117323168,"results":"107","hashOfConfig":"61"},{"size":6621,"mtime":1667117323169,"results":"108","hashOfConfig":"61"},{"size":4169,"mtime":1667117323169,"results":"109","hashOfConfig":"61"},{"size":1164,"mtime":1667117323170,"results":"110","hashOfConfig":"61"},{"size":1306,"mtime":1667117323170,"results":"111","hashOfConfig":"61"},{"size":2986,"mtime":1667117323170,"results":"112","hashOfConfig":"61"},{"size":3533,"mtime":1667117323171,"results":"113","hashOfConfig":"61"},{"size":5645,"mtime":1667117323171,"results":"114","hashOfConfig":"61"},{"size":9550,"mtime":1667117323171,"results":"115","hashOfConfig":"61"},{"size":849,"mtime":1667117323172,"results":"116","hashOfConfig":"61"},{"size":584,"mtime":1667117323172,"results":"117","hashOfConfig":"61"},{"size":190,"mtime":1667117323172,"results":"118","hashOfConfig":"61"},{"size":201,"mtime":1667117323216,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yid79s",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302"},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Documents/Medbox-Client/pages/404.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/_app.js",["323"],[],"import \"../styles/globals.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SessionProvider } from \"next-auth/react\";\nimport Head from \"next/head\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <ChakraProvider>\n        <Head>\n          <title>Medbox</title>\n          <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n          <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin />\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\"\n            rel=\"stylesheet\"\n          />\n          <meta name=\"description\" content=\"Buy your medicine here\" />\n          <link rel=\"icon\" href=\"/admin/Medbox.png\" />\n        </Head>\n        <div className=\"font-[poppins]\">\n          <Component {...pageProps} />\n        </div>\n      </ChakraProvider>\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n","/Users/mac/Documents/Medbox-Client/pages/admin/adminDetailProduct/[product_id].js",["324"],[],"import {\n  Table,\n  Thead,\n  Tbody,\n  Box,\n  Tr,\n  Th,\n  Td,\n  Button,\n  HStack,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport axiosInstance from '../../../src/config/api';\nimport React, { useEffect, useState } from 'react';\nimport AdminNavbar from '../../../components/AdminNavbar';\nimport AddProductStock from '../../../components/AddProductStock';\nimport UpdateAddedStock from '../../../components/UpdateAddedStock';\nimport DeleteAddedStock from '../../../components/DeleteAddedStock';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nfunction DetailProduct(props) {\n  const router = useRouter();\n  const { product_id } = props;\n  const [asc, setAsc] = useState(true);\n  const [modalAdd, setModalAdd] = useState(false);\n  const [modalEdit, setModalEdit] = useState(false);\n  const [modalDelete, setModalDelete] = useState(false);\n  const [selectedOpname, setSelectedOpname] = useState();\n  const [stockOpname, setStockOpname] = useState(\n    props.stockOpname?.resGetStockOpname,\n  );\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n\n  useEffect(() => {\n    fetchStockOpname();\n  }, [startDate, endDate]);\n\n  async function fetchStockOpname() {\n    try {\n      let paramsStartDate;\n      let paramsEndDate;\n      if (startDate) {\n        paramsStartDate = new Date(startDate);\n        paramsStartDate.setHours(startDate.getHours() + 7);\n      }\n\n      if (endDate) {\n        paramsEndDate = new Date(endDate);\n        paramsEndDate.setHours(endDate.getHours() + 7);\n      }\n\n      const resGetStockOpname = await axiosInstance.get(\n        `/stockOpname/${product_id}`,\n        {\n          params: { paramsStartDate, paramsEndDate },\n        },\n      );\n      setStockOpname(resGetStockOpname.data.resGetStockOpname);\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  function renderStockOpname() {\n    let stockOpnames = [];\n    if (stockOpname.length) {\n      stockOpname.forEach((stockOp) => {\n        stockOpnames.push({\n          createdAt: stockOp.createdAt.slice(0, 10),\n          productName: stockOp.product.productName,\n          qty: stockOp.stock,\n          activity: stockOp.activity,\n          stock_opname_id: stockOp.stock_opname_id,\n        });\n      });\n    }\n    stockOpnames.sort((a, b) => {\n      let x = a.createdAt;\n      let y = b.createdAt;\n      if (x < y) {\n        return asc ? -1 : 1;\n      } else if (x > y) {\n        return asc ? 1 : -1;\n      }\n    });\n\n    return stockOpnames.map((data, index) => {\n      let date = new Date().toJSON();\n      return (\n        <Tr key={data.product_id}>\n          <Td textAlign=\"center\">{data.createdAt}</Td>\n          <Td textAlign=\"center\">{data.productName}</Td>\n          <Td textAlign=\"center\">{data.qty}</Td>\n          <Td textAlign=\"center\">\n            {data.activity.toUpperCase().split('_').join(' ')}\n          </Td>\n          <Td>\n            {data.activity == 'tambah_stok' &&\n            data.createdAt.slice(0, 10) == date.slice(0, 10) ? (\n              <HStack marginLeft={7}>\n                <Button\n                  height={4}\n                  width={4}\n                  colorScheme=\"white\"\n                  variant=\"solid\"\n                  size=\"xxs\"\n                  onClick={() => {\n                    setModalEdit(true);\n                    setSelectedOpname(data.stock_opname_id);\n                  }}\n                >\n                  <EditIcon w={3.5} h={3.5} color=\"#004776\" />\n                </Button>\n                <Button\n                  height={4}\n                  width={4}\n                  colorScheme=\"white\"\n                  variant=\"solid\"\n                  size=\"xxs\"\n                  onClick={() => {\n                    setModalDelete(true);\n                    setSelectedOpname(data.stock_opname_id);\n                  }}\n                >\n                  <DeleteIcon w={3.5} h={3.5} color=\"#004776\" />\n                </Button>\n              </HStack>\n            ) : null}\n          </Td>\n        </Tr>\n      );\n    });\n  }\n\n  return (\n    <div className=\"flex w-[100vw] h-[100vh] overflow-auto \">\n      <AdminNavbar path={router.pathname} />\n      <VStack align={'start'}>\n        <Box>\n          <VStack align=\"start\">\n            <Text\n              fontSize={24}\n              fontWeight={500}\n              marginTop={7}\n              marginLeft={85}\n              marginBottom={5}\n            >\n              Riwayat Produk\n            </Text>\n            <HStack paddingBottom={4}>\n              <Button\n                variant=\"outline\"\n                colorScheme=\"linkedin\"\n                marginLeft={155}\n                onClick={() => {\n                  setModalAdd(true);\n                }}\n              >\n                <Text>Tambah Stok Produk</Text>\n                <AddProductStock\n                  isOpen={modalAdd}\n                  product_id={product_id}\n                  fetchStockOpname={fetchStockOpname}\n                  onClick={() => {\n                    onClose();\n                  }}\n                  onClose={() => setModalAdd(false)}\n                />\n              </Button>\n            </HStack>\n          </VStack>\n          <HStack paddingLeft={155} paddingBottom={2}>\n            <HStack>\n              <DatePicker\n                placeholderText=\"Start date\"\n                className=\"border-black border-solid border-[2px] rounded-[.3vw] pl-3 text-black\"\n                selected={startDate}\n                onChange={(date) => {\n                  setStartDate(date);\n                }}\n              />\n            </HStack>\n            <HStack>\n              <DatePicker\n                placeholderText=\"End date\"\n                className=\"border-black border-solid border-[2px] rounded-[.3vw] pl-3 text-black\"\n                selected={endDate}\n                onChange={(date) => {\n                  setEndDate(date);\n                }}\n              />\n            </HStack>\n            <HStack>\n              <Button\n                colorScheme={'linkedin'}\n                variant=\"ghost\"\n                onClick={() => {\n                  setStartDate();\n                  setEndDate();\n                }}\n              >\n                Reset Filter\n              </Button>\n            </HStack>\n            <HStack paddingLeft={2}>\n              <Button\n                variant=\"outline\"\n                colorScheme=\"linkedin\"\n                onClick={() => {\n                  setAsc(!asc);\n                }}\n              >\n                Sort By Date : {asc ? 'Asc' : 'Desc'}\n              </Button>\n            </HStack>\n          </HStack>\n        </Box>\n        <VStack className=\"overflow-auto scrollbar\" paddingLeft={155}>\n          <Table\n            size=\"lg\"\n            height={'10vh'}\n            variant=\"striped\"\n            border=\"2px\"\n            alignSelf=\"center\"\n          >\n            <Thead>\n              <Tr border=\"2px\">\n                <Th textAlign=\"center\">Tanggal</Th>\n                <Th textAlign=\"center\">Nama Obat</Th>\n                <Th textAlign=\"center\">Quantity</Th>\n                <Th textAlign=\"center\">Aktivitas</Th>\n                <Th textAlign=\"center\">Pengaturan</Th>\n              </Tr>\n            </Thead>\n            <UpdateAddedStock\n              isOpen={modalEdit}\n              product_id={product_id}\n              stock_opname_id={selectedOpname}\n              fetchStockOpname={fetchStockOpname}\n              onClose={() => setModalEdit(false)}\n            />\n            <DeleteAddedStock\n              isOpen={modalDelete}\n              product_id={product_id}\n              stock_opname_id={selectedOpname}\n              fetchStockOpname={fetchStockOpname}\n              onClose={() => setModalDelete(false)}\n            />\n            <Tbody>{renderStockOpname()}</Tbody>\n          </Table>\n        </VStack>\n      </VStack>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const { product_id } = context.params;\n\n    const resGetStockOpname = await axiosInstance.get(\n      `/stockOpname/${product_id}`,\n    );\n\n    return {\n      props: {\n        product_id: product_id,\n        stockOpname: resGetStockOpname.data,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    const { message } = error;\n    return { props: { message } };\n  }\n}\n\nexport default DetailProduct;\n","/Users/mac/Documents/Medbox-Client/pages/admin/category/[params].js",["325"],[],"import React, { useState, useEffect } from 'react';\nimport AdminNavbar from '../../../components/AdminNavbar';\nimport { useRouter } from 'next/router';\nimport axiosInstance from '../../../src/config/api';\nimport Image from 'next/image';\nimport EditCategoryModal from '../../../components/editCategoryModal';\nimport {\n  Box,\n  Button,\n  Flex,\n  Spacer,\n  Text,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport { api_origin } from '../../../constraint/index';\nimport AddCategoryModal from '../../../components/AddCategoryModal';\n\nfunction Category(props) {\n  const [categoryList, setCategoryList] = useState(props.categoriesLists);\n  const [addCategoryButton, setAddCategoryButton] = useState(false);\n  const [page, setPage] = useState(1);\n  const [editCategoryButton, setEditCategoryButton] = useState(false);\n  const [selected, setSelected] = useState('');\n  const [currentCategory, setCurrentCategory] = useState(\n    props.categoriesLists[0],\n  );\n\n  useEffect(() => {\n    const { params } = router.query;\n    setCategoryList(props.categoriesLists);\n    setSelected(params);\n  });\n\n  function categoryMap() {\n    return categoryList?.map((category, index) => {\n      return (\n        <div\n          key={category.category_lists_id}\n          className=\"w-[90%] mb-[3vh] h-[15%] flex-none flex flex-col items-end shadow-[0px_6px_20px_0px_rgba(0,28,47,0.05)]\"\n        >\n          <div className=\"flex w-[100%] h-[25%] pl-[1.5vw] bg-[#008DEB] text-white\">\n            Category ID: {category.category_lists_id}\n          </div>\n\n          <div className=\"w-[100%] h-[85%] flex items-center justify-start\">\n            <div className=\"w-[5%] ml-[1.5vw]\">\n              <Image\n                unoptimized\n                alt=\"resep-logo\"\n                layout=\"responsive\"\n                width={1}\n                height={1}\n                src={api_origin + category.categoryImage}\n                loader={() => {\n                  return api_origin + category.categoryImage;\n                }}\n              />\n            </div>\n\n            <p className=\"w-[73%] font-[650] text-[1.1rem] pl-[2vw]\">\n              {category.category}\n            </p>\n\n            <div className=\"w-[20%] h-[100%] flex items-center justify-evenly\">\n              <Button\n                variant=\"outline\"\n                colorScheme=\"linkedin\"\n                onClick={() => {\n                  setCurrentCategory(category);\n                  setEditCategoryButton(true);\n                  setCategoryList([...categoryList]);\n                }}\n                sx={{ width: '45%', height: '5vh' }}\n              >\n                <p className=\"text-[12px]\">Edit</p>\n              </Button>\n              <Button\n                variant=\"outline\"\n                colorScheme=\"red\"\n                onClick={() => {\n                  deleteProduct(category.category_lists_id);\n                  setCategoryList(props.categoriesLists.splice(index, 1));\n                }}\n                sx={{ width: '45%', height: '5vh' }}\n              >\n                <p className=\"text-[12px]\">Hapus</p>\n              </Button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  async function deleteProduct(category_lists_id) {\n    try {\n      const resDeleteProduct = await axiosInstance.delete(\n        `/categoriesLists/${category_lists_id}`,\n      );\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  const router = useRouter();\n\n  const path = router.pathname;\n\n  return (\n    <div className=\"flex w-[100vw] h-[100vh]\">\n      <AdminNavbar path={path} />\n      <EditCategoryModal\n        currentCategory={currentCategory}\n        editCategoryButton={editCategoryButton}\n        setEditCategoryButton={setEditCategoryButton}\n      />\n      <AddCategoryModal\n        addCategoryButton={addCategoryButton}\n        setAddCategoryButton={setAddCategoryButton}\n      />\n\n      <div className=\"h-[100%] w-[85%] flex flex-col items-center justify-evenly\">\n        <div className=\"h-[10%] w-[90%] flex items-center font-[500] text-[3vh]\">\n          Category\n        </div>\n\n        <div className=\"flex flex-col w-[100%] h-[85%] items-center\">\n          {categoryMap()}\n        </div>\n\n        <div className=\"flex w-[90%] h-[5%] mb-[3vh] items-center\">\n          <Button\n            disabled={page <= 1}\n            borderRadius={'none'}\n            size={'lg'}\n            backgroundColor={'#008DEB'}\n            color={'white'}\n            onClick={() => {\n              setPage(page - 1);\n\n              const splitParams = router.query.params.split('=');\n\n              splitParams[splitParams.length - 1] =\n                parseInt(splitParams[splitParams.length - 1]) - 1;\n\n              const joinParams = splitParams.join('=');\n\n              router.replace(`/admin/category/${joinParams}`);\n            }}\n            style={{ marginRight: '1vw' }}\n          >\n            {'Previous'}\n          </Button>\n\n          <Button\n            borderRadius={'none'}\n            size={'lg'}\n            backgroundColor={'#008DEB'}\n            color={'white'}\n            onClick={() => {\n              setPage(page + 1);\n\n              const splitParams = router.query.params.split('=');\n\n              splitParams[splitParams.length - 1] =\n                parseInt(splitParams[splitParams.length - 1]) + 1;\n\n              const joinParams = splitParams.join('=');\n\n              router.replace(`/admin/category/${joinParams}`);\n            }}\n            disabled={!props.hasMore}\n          >\n            {'Next'}\n          </Button>\n\n          <div className={'grow'} />\n\n          <div\n            onClick={() => {\n              setAddCategoryButton(true);\n            }}\n            className=\"h-[90%] px-[2vw] bg-[#008DEB] text-white flex items-center hover:cursor-pointer mx-1 font-[700]\"\n          >\n            + Tambah Kategori\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    let resGetCategoriesLists = '';\n\n    if (context.params.params.includes('byId')) {\n      const splitParams = context.params.params.split('=');\n      const page = splitParams[1];\n      resGetCategoriesLists = await axiosInstance.get(\n        'categoriesLists/categoryList/',\n        {\n          params: {\n            page,\n            limit: 5,\n          },\n        },\n      );\n    }\n    return {\n      props: {\n        params: context.params,\n        categoriesLists: resGetCategoriesLists.data.data.getCategory,\n        hasMore: resGetCategoriesLists.data.hasMore,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error: error.message } };\n  }\n}\n\nexport default Category;\n","/Users/mac/Documents/Medbox-Client/pages/admin/category/index.js",["326"],[],"import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nfunction Index() {\n  const router = useRouter();\n  useEffect(() => {\n    router.replace(`/admin/category/byId=1`);\n  }, []);\n  return <div></div>;\n}\n\nexport default Index;\n","/Users/mac/Documents/Medbox-Client/pages/admin/index.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/admin/inventory/[params].js",["327"],[],"import React, { useEffect, useState } from 'react';\nimport AdminNavbar from '../../../components/AdminNavbar';\nimport { useRouter } from 'next/router';\nimport {\n  Button,\n  Box,\n  HStack,\n  Text,\n  Input,\n  VStack,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport Image from 'next/image';\nimport axiosInstance from '../../../src/config/api';\nimport Link from 'next/link';\nimport AddFormulaModal from '../../../components/AddFormulaModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AdminProductDetails from '../../../components/adminProductDetails';\nimport EditProductModal from '../../../components/editProductModal';\nimport AddCategoryModal from '../../../components/AddCategoryModal';\nimport { getSession, useSession } from 'next-auth/react';\nimport { api_origin } from '../../../constraint/index';\n\nfunction Inventory(props) {\n  const router = useRouter();\n  const { params } = router.query;\n  const splitParams = params.split('=');\n  const [selected, setSelected] = useState('');\n  const [showCategories, setShowCategories] = useState(false);\n  const [productList, setProductList] = useState(props.products);\n  const [currentPage, setCurrentPage] = useState(\n    parseInt(splitParams[splitParams.length - 1]),\n  );\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [currentProduct, setCurrentProduct] = useState(props.products[0]);\n  const [addProductButton, setAddProductButton] = useState(false);\n  const [openProductDetails, setOpenProductDetails] = useState(false);\n  const [editProductButton, setEditProductButton] = useState(false);\n  const [productsAll, setProductsAll] = useState(props.productsAll);\n  const [addFormulaButton, setAddFormulaButton] = useState(false);\n\n  useEffect(() => {\n    setProductList(props.products);\n    setProductsAll(props.productsAll);\n    setSelected(params);\n  });\n\n  const session = useSession();\n  const toast = useToast();\n\n  if (session.data) {\n    if (!session.data.user.user.isAdmin) {\n      router.replace('/');\n    }\n  }\n\n\n  function showCategoriesSwitch() {\n    setShowCategories(!showCategories);\n  }\n\n  function categoriesMap() {\n    return props.categoriesLists.categories.map((category) => {\n      const selectedCategoryListsId = selected.split('=')[0];\n\n      return (\n        <div\n          key={category.category_lists_id}\n          onClick={() => {\n            router.replace(\n              `/admin/inventory/${category.category_lists_id}=category=1`,\n            );\n            setCurrentPage(1);\n            setSearchKeyword('');\n          }}\n          className={\n            selectedCategoryListsId == category.category_lists_id\n              ? 'h-[7vh] pl-[1vw] flex items-center font-[400] text-[1.1rem] text-white cursor-pointer bg-[#008DEB]'\n              : 'h-[7vh] pl-[1vw] flex items-center font-[400] text-[1.1rem] border-transparent hover:text-white hover:cursor-pointer hover:bg-[#008DEB] bg-white'\n          }\n        >\n          {category.category.length <= 20\n            ? category.category\n            : `${category.category.slice(0, 20)}...`}\n        </div>\n      );\n    });\n  }\n\n  function productMap() {\n    return productList?.map((product, index) => {\n      return (\n        <div\n          key={product.product_id}\n          className=\"w-[90%] mb-[1%] h-[30%] flex-none flex flex-col items-end bg-white\"\n        >\n          <div className=\"pl-[1.5vw] flex w-[100%] bg-[#008DEB] text-white\">\n            Product ID: {product.product_id}\n          </div>\n\n          <div className=\"w-[100%] h-[85%] flex-none flex justify-center items-center\">\n            <div\n              onClick={() => {\n                setCurrentProduct(product);\n                setOpenProductDetails(true);\n              }}\n              className=\"w-[7vw] ml-[1.5vw] hover:cursor-pointer\"\n            >\n              <Image\n                unoptimized\n                alt=\"resep-logo\"\n                layout=\"responsive\"\n                width={1}\n                height={1}\n                src={api_origin + product.productImage}\n                loader={() => {\n                  return api_origin + product.productImage;\n                }}\n              />\n            </div>\n\n            <div className=\"flex flex-col w-[70%] text-black h-[7vw] justify-center pl-[2vw] text-[#6E6E6E]\">\n              <p className=\"font-[500] text-[1.5rem]\">\n                {product.productName.length <= 40\n                  ? product.productName\n                  : `${product.productName.slice(0, 40)}...`}\n              </p>\n              <p className=\"text-[1.1rem] font-[400]\">\n                Rp.{product.productPrice.toLocaleString('id')}\n              </p>\n              <p className=\"text-[1.1rem] font-[400]\">\n                Stok {product.productStock}\n              </p>\n              <Link href={`/admin/adminDetailProduct/${product.product_id}`}>\n                <Button\n                  width={125}\n                  bgColor=\"white\"\n                  _hover=\"white\"\n                  variant=\"solid\"\n                  color=\"blue.400\"\n                >\n                  Riwayat Produk\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"grow\" />\n\n            <div className=\"w-[10%] flex flex-col h-[7vw] justify-evenly mr-[1.5vw]\">\n              <Button\n                variant=\"outline\"\n                colorScheme=\"linkedin\"\n                onClick={() => {\n                  setCurrentProduct(product);\n                  setEditProductButton(true);\n                }}\n                sx={{ width: '100%', height: '5vh' }}\n              >\n                <p className=\"text-[12px]\">Edit</p>\n              </Button>\n              <Button\n                variant=\"outline\"\n                colorScheme=\"red\"\n                onClick={() => {\n                  deleteProduct(product.product_id, index);\n                }}\n                sx={{ width: '100%', height: '5vh' }}\n              >\n                <p className=\"text-[12px]\">Hapus</p>\n              </Button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  async function deleteProduct(product_id, index) {\n    try {\n      await axiosInstance.delete(`/products/${product_id}`);\n      setProductList(props.products.splice(index, 1));\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response?.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  }\n\n  return (\n    <div className=\"flex w-[100vw] h-[100vh]\">\n      <AdminNavbar path={router.pathname} />\n      <div className=\"flex flex-col w-[85%] items-center\">\n        <div className=\"h-[10%] w-[90%] flex items-center font-[500] text-[3vh]\">\n          Inventory\n        </div>\n        <AddFormulaModal\n          addFormulaButton={addFormulaButton}\n          setAddFormulaButton={setAddFormulaButton}\n          allProducts={props.productsAll.data.resGetAllProducts}\n        />\n        <AddProductModal\n          addProductButton={addProductButton}\n          setAddProductButton={setAddProductButton}\n          categoriesLists={props.categoriesLists.categories}\n        />\n        <EditProductModal\n          currentProduct={currentProduct}\n          editProductButton={editProductButton}\n          productList={productList}\n          setProductList={setProductList}\n          setEditProductButton={setEditProductButton}\n          categoriesLists={props.categoriesLists.categories}\n        />\n        <AdminProductDetails\n          currentProduct={currentProduct}\n          openProductDetails={openProductDetails}\n          setOpenProductDetails={setOpenProductDetails}\n        />\n        <div className=\"h-[90%] w-[90%]\">\n          <div className=\"flex flex-col w-[100%] bg-[#F5F6F6] h-[100%]\">\n            <div className=\"flex h-[10%] w-[100%]\">\n              <div\n                onClick={() => {\n                  router.replace(`/admin/inventory/byId=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('byId')\n                    ? 'w-[20%] flex items-center justify-center bg-[#008DEB] text-white hover:cursor-pointer'\n                    : 'w-[20%] flex items-center justify-center bg-[#F5F6F6] hover:cursor-pointer'\n                }\n              >\n                By Id\n              </div>\n              <div\n                onClick={() => {\n                  router.replace(`/admin/inventory/sort=productName=ASC=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('sort=productName=ASC')\n                    ? 'w-[20%] flex items-center justify-center bg-[#008DEB] text-white hover:cursor-pointer'\n                    : 'w-[20%] flex items-center justify-center bg-[#F5F6F6] hover:cursor-pointer'\n                }\n              >\n                Name Asc\n              </div>\n              <div\n                onClick={() => {\n                  router.replace(`/admin/inventory/sort=productName=DESC=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('sort=productName=DESC')\n                    ? 'w-[20%] flex items-center justify-center bg-[#008DEB] text-white hover:cursor-pointer'\n                    : 'w-[20%] flex items-center justify-center bg-[#F5F6F6] hover:cursor-pointer'\n                }\n              >\n                Name Desc\n              </div>\n              <div\n                onClick={() => {\n                  router.replace(`/admin/inventory/sort=productPrice=ASC=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('sort=productPrice=ASC')\n                    ? 'w-[20%] flex items-center justify-center bg-[#008DEB] text-white hover:cursor-pointer'\n                    : 'w-[20%] flex items-center justify-center bg-[#F5F6F6] hover:cursor-pointer'\n                }\n              >\n                Price Asc\n              </div>\n              <div\n                onClick={() => {\n                  router.replace(`/admin/inventory/sort=productPrice=DESC=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('sort=productPrice=DESC')\n                    ? 'w-[20%] flex items-center justify-center bg-[#008DEB] text-white hover:cursor-pointer'\n                    : 'w-[20%] flex items-center justify-center bg-[#F5F6F6] hover:cursor-pointer'\n                }\n              >\n                Price Desc\n              </div>\n            </div>\n\n            <div className=\"w-[100%] h-[7vh] flex justify-between my-[2vh] px-[3vw]\">\n              <div\n                id=\"searchbar desktop\"\n                className=\"bg-white flex w-[35vw] h-[7vh] z-[2] left-[15vw] bottom-[88px] justify-end\"\n              >\n                <Input\n                  onChange={(event) => {\n                    setSearchKeyword(event.target.value);\n                  }}\n                  value={searchKeyword}\n                  variant=\"unstyled\"\n                  placeholder=\"Cari Obat\"\n                  sx={{ paddingLeft: '5%' }}\n                />\n                <div\n                  onClick={() => {\n                    router.replace(`/admin/inventory/${searchKeyword}=key=1`);\n                    setCurrentPage(1);\n                  }}\n                  className=\"bg-[#008DEB] flex items-center justify-center w-[20%] hover:cursor-pointer\"\n                >\n                  <Image\n                    src=\"/landingpage/Search-desktop.png\"\n                    alt=\"arrow-logo\"\n                    layout=\"fixed\"\n                    width={24}\n                    height={24}\n                  />\n                </div>\n              </div>\n\n              <div\n                id=\"categories\"\n                className={\n                  showCategories\n                    ? 'w-[30%] h-[50vh] bg-white flex flex-col z-[3]'\n                    : 'w-[30%] h-[100%] bg-white flex flex-col z-[3]'\n                }\n              >\n                <div\n                  onClick={showCategoriesSwitch}\n                  className={\n                    showCategories\n                      ? 'text-[1.2rem] font-[500] flex hover:cursor-pointer justify-between w-[100%] h-[7vh] px-[1vw]'\n                      : 'text-[1.2rem] font-[500] flex hover:cursor-pointer justify-between bg-white w-[100%] h-[7vh] px-[1vw]'\n                  }\n                >\n                  <div className=\"flex items-center justify-center\">\n                    Kategori\n                  </div>\n                  <div\n                    className={\n                      showCategories\n                        ? 'w-[4%] flex items-center justify-center rotate-90 transition duration-100'\n                        : 'w-[4%] flex items-center justify-center transition duration-100'\n                    }\n                  >\n                    <FontAwesomeIcon icon={faCaretRight} />\n                  </div>\n                </div>\n                <div\n                  className={\n                    showCategories\n                      ? 'overflow-auto scrollbar h-[43vh] bg-white'\n                      : ''\n                  }\n                >\n                  {showCategories ? categoriesMap() : ''}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"h-[70%] w-[100%] flex flex-col items-center\">\n              {productMap()}\n            </div>\n\n            <div className=\"w-[100%] flex justify-between px-[3vw]\">\n              <div className=\"w-[10%] flex justify-between\">\n                <Button\n                  size=\"lg\"\n                  borderRadius={'none'}\n                  disabled={currentPage <= 1}\n                  colorScheme=\"linkedin\"\n                  onClick={() => {\n                    setCurrentPage(currentPage - 1);\n\n                    const splitParams = router.query.params.split('=');\n\n                    splitParams[splitParams.length - 1] =\n                      parseInt(splitParams[splitParams.length - 1]) - 1;\n\n                    const joinParams = splitParams.join('=');\n\n                    router.replace(`/admin/inventory/${joinParams}`);\n                  }}\n                >\n                  {'<'}\n                </Button>\n                <div className=\"h-[100%] w-[7vw] flex items-center justify-center\">\n                  {currentPage}\n                </div>\n                <Button\n                  borderRadius={'none'}\n                  onClick={() => {\n                    setCurrentPage(currentPage + 1);\n\n                    const splitParams = router.query.params.split('=');\n\n                    splitParams[splitParams.length - 1] =\n                      parseInt(splitParams[splitParams.length - 1]) + 1;\n\n                    const joinParams = splitParams.join('=');\n\n                    router.replace(`/admin/inventory/${joinParams}`);\n                  }}\n                  disabled={!props.hasMore}\n                  size=\"lg\"\n                  colorScheme=\"linkedin\"\n                >\n                  {'>'}\n                </Button>\n              </div>\n\n              <div className=\"flex\">\n                <div\n                  onClick={() => {\n                    setAddFormulaButton(true);\n                  }}\n                  className=\"h-[100%] px-[2vw] bg-[#008DEB] text-white flex items-center hover:cursor-pointer mx-1\"\n                >\n                  + Tambah Obat Racikan\n                </div>\n\n                <div\n                  onClick={() => {\n                    setAddProductButton(true);\n                  }}\n                  className=\"h-[100%] px-[2vw] bg-[#008DEB] text-white flex items-center hover:cursor-pointer mx-1\"\n                >\n                  + Tambah Produk\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    if (!session.user.user.isAdmin) {\n      return { redirect: { destination: '/' } };\n    }\n\n    const resGetCategoriesLists = await axiosInstance.get('categories/getAll');\n\n    let resGetProducts = '';\n\n    if (context.params.params.includes('byId')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[1];\n\n      resGetProducts = await axiosInstance.get('products/all', {\n        params: { page, limit: 3 },\n      });\n    } else if (context.params.params.includes('sort')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/sort/${context.params.params}`,\n        { params: { page, limit: 3 } },\n      );\n    } else if (context.params.params.includes('category')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/byCategory/${context.params.params}`,\n        { params: { page, limit: 3 } },\n      );\n    } else if (context.params.params.includes('key')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/specifics/${splitParams[0]}`,\n        {\n          params: { page, limit: 3 },\n        },\n      );\n    }\n    const resGetAllProductsAll = await axiosInstance.get('products');\n\n    return {\n      props: {\n        params: context.params,\n        categoriesLists: resGetCategoriesLists.data,\n        products: resGetProducts.data.products,\n        hasMore: resGetProducts.data.hasMore,\n        productsAll: resGetAllProductsAll.data,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error: error.message } };\n  }\n}\n\nexport default Inventory;\n","/Users/mac/Documents/Medbox-Client/pages/admin/inventory/index.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/admin/laporan/[params].js",["328"],[],"import React, { useEffect, useState } from 'react';\nimport AdminNavbar from '../../../components/AdminNavbar';\nimport { useRouter } from 'next/router';\nimport { getSession, useSession } from 'next-auth/react';\nimport axiosInstance from '../../../src/config/api';\nimport {\n  Button,\n  Table,\n  TableCaption,\n  TableContainer,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport DatePicker from 'react-datepicker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\nfunction Laporan(props) {\n  const router = useRouter();\n  const session = useSession();\n  const { params } = router.query;\n  const [selected, setSelected] = useState(params);\n  const [mainAsc, setMainAsc] = useState(true);\n  const [asc, setAsc] = useState(true);\n  const [sortOption, setSortOption] = useState('date');\n  const [transactions, setTransactions] = useState(\n    props.byProduct?.allTransaction,\n  );\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n\n  useEffect(() => {\n    setSelected(params);\n    setMainAsc(true);\n    fetchNewWithFilter();\n  }, [params, startDate, endDate]);\n\n  const pageTabs = ['Product', 'Transaction', 'User'];\n\n  if (session.data) {\n    if (!session.data.user.user.isAdmin) {\n      router.replace('/');\n    }\n  }\n\n  async function fetchNewWithFilter() {\n    try {\n      let paramsStartDate;\n      let paramsEndDate;\n\n      if (startDate) {\n        paramsStartDate = new Date(startDate);\n        paramsStartDate.setHours(startDate.getHours() + 7);\n      }\n\n      if (endDate) {\n        paramsEndDate = new Date(endDate);\n        paramsEndDate.setHours(endDate.getHours() + 7);\n      }\n\n      const fetchNewProduct = await axiosInstance.get(\n        'transactions/all/products',\n        {\n          params: { paramsStartDate, paramsEndDate },\n        },\n      );\n\n      setTransactions(fetchNewProduct.data.allTransaction);\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  function tableSort() {\n    let saleObjArray = [];\n\n    if (transactions.length) {\n      transactions?.forEach((transaction) => {\n        transaction.transaction_details.forEach((details) => {\n          saleObjArray.push({\n            createdAt: details.createdAt.slice(0, 10),\n            transaction_id: transaction.transaction_id,\n            transaction_details_id: details.transaction_details_id,\n            userName: transaction.user.name,\n            user_id: transaction.user.user_id,\n            productName: details.product.productName,\n            qty: details.quantity,\n            totalPrice: `Rp. ${(\n              details.product.productPrice * details.quantity\n            ).toLocaleString('id')}`,\n          });\n        });\n      });\n    }\n\n    switch (selected) {\n      case 'product':\n        saleObjArray = saleObjArray.sort((a, b) => {\n          let x = a.productName.toLowerCase();\n          let y = b.productName.toLowerCase();\n          let xCreatedDate = a.createdAt;\n          let yCreatedDate = b.createdAt;\n          let xTotalPrice = parseInt(a.totalPrice.slice(4).split('.').join(''));\n          let yTotalPrice = parseInt(b.totalPrice.slice(4).split('.').join(''));\n          if (x < y) {\n            return mainAsc ? -1 : 1;\n          } else if (x > y) {\n            return mainAsc ? 1 : -1;\n          } else if (x == y) {\n            if (sortOption == 'date') {\n              if (asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              }\n            } else if (sortOption == 'totalPrice') {\n              if (asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              }\n            }\n          }\n        });\n\n        break;\n      case 'transaction':\n        saleObjArray = saleObjArray.sort((a, b) => {\n          let xCreatedDate = a.createdAt;\n          let yCreatedDate = b.createdAt;\n          let xTotalPrice = parseInt(a.totalPrice.slice(4).split('.').join(''));\n          let yTotalPrice = parseInt(b.totalPrice.slice(4).split('.').join(''));\n          if (a.transaction_id - b.transaction_id == 0) {\n            if (sortOption == 'date') {\n              if (asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              }\n            } else if (sortOption == 'totalPrice') {\n              if (asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              }\n            }\n          }\n          return mainAsc\n            ? a.transaction_id - b.transaction_id\n            : b.transaction_id - a.transaction_id;\n        });\n\n        break;\n      case 'user':\n        saleObjArray = saleObjArray.sort((a, b) => {\n          let x = a.userName.toLowerCase();\n          let y = b.userName.toLowerCase();\n          let xCreatedDate = a.createdAt;\n          let yCreatedDate = b.createdAt;\n          let xTotalPrice = parseInt(a.totalPrice.slice(4).split('.').join(''));\n          let yTotalPrice = parseInt(b.totalPrice.slice(4).split('.').join(''));\n          if (x < y) {\n            return mainAsc ? -1 : 1;\n          } else if (x > y) {\n            return mainAsc ? 1 : -1;\n          } else if (x == y) {\n            if (sortOption == 'date') {\n              if (asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xCreatedDate < yCreatedDate) {\n                  return 1;\n                } else if (xCreatedDate > yCreatedDate) {\n                  return -1;\n                } else if (xCreatedDate == yCreatedDate) {\n                  return 0;\n                }\n              }\n            } else if (sortOption == 'totalPrice') {\n              if (asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              } else if (!asc) {\n                if (xTotalPrice < yTotalPrice) {\n                  return 1;\n                } else if (xTotalPrice > yTotalPrice) {\n                  return -1;\n                } else if (xTotalPrice == yTotalPrice) {\n                  return 0;\n                }\n              }\n            }\n          }\n        });\n\n        break;\n    }\n\n    return saleObjArray.map((obj) => {\n      return (\n        <Tr key={obj.transaction_details_id}>\n          <Td>{obj.createdAt}</Td>\n          <Td>{obj.transaction_id}</Td>\n          <Td>{obj.userName}</Td>\n          <Td>{obj.user_id}</Td>\n          <Td>{obj.productName}</Td>\n          <Td>{obj.qty}</Td>\n          <Td>{obj.totalPrice}</Td>\n        </Tr>\n      );\n    });\n  }\n\n  function tabsMap() {\n    return pageTabs.map((content) => {\n      return (\n        <div\n          key={content}\n          onClick={() => {\n            router.replace(`/admin/laporan/${content.toLowerCase()}`);\n            setMainAsc(!mainAsc);\n          }}\n          className={\n            selected.includes(content.toLowerCase())\n              ? 'w-[33.3%] flex justify-center items-center bg-[#008DEB] text-white'\n              : 'w-[33.3%] flex justify-center items-center '\n          }\n        >\n          Per {content}\n        </div>\n      );\n    });\n  }\n\n  const path = router.pathname;\n\n  return (\n    <div className=\"flex w-[100vw] h-[100vh]\">\n      <AdminNavbar path={path} />\n      <div className=\"w-[85%] h-[100%] flex justify-center\">\n        <div className=\"w-[90%] h-[100%]\">\n          <div className=\"h-[10%] flex items-center\">\n            <p className=\"text-[2rem] mr-[3vw]\">Laporan penjualan</p>\n          </div>\n          <div className=\"flex items-center h-[10%] w-[100%]\">\n            <div className=\"w-[40%] h-[70%] flex flex-col justify-end pb-[.5vh] text-white text-[1rem] bg-[#008DEB] px-[.5vw] rounded-[.5vw]\">\n              <div>Filter by Date</div>\n              <div className=\"flex w-[100%]\">\n                <DatePicker\n                  placeholderText=\"Start date\"\n                  className=\"border-black w-[14vw] border-solid border-[2px] rounded-[.3vw] pl-3 text-black\"\n                  selected={startDate}\n                  onChange={(date) => {\n                    setStartDate(date);\n                  }}\n                />\n                <DatePicker\n                  placeholderText=\"End date\"\n                  className=\"border-black w-[14vw] border-solid border-[2px] rounded-[.3vw] pl-3 text-black\"\n                  selected={endDate}\n                  onChange={(date) => {\n                    setEndDate(date);\n                  }}\n                />\n              </div>\n            </div>\n\n            <Button\n              colorScheme={'linkedin'}\n              variant=\"ghost\"\n              className=\"mx-[3vw]\"\n              onClick={() => {\n                setStartDate();\n                setEndDate();\n              }}\n            >\n              Reset Filter\n            </Button>\n\n            <div className=\"flex w-[30%] justify-between\">\n              <Button\n                width=\"15%\"\n                onClick={() => {\n                  setAsc(!asc);\n                }}\n              >\n                {asc ? 'Asc' : 'Desc'}\n              </Button>\n              <Button\n                colorScheme={sortOption == 'totalPrice' ? 'linkedin' : 'gray'}\n                onClick={() => {\n                  setSortOption('totalPrice');\n                }}\n              >\n                By Total Price\n              </Button>\n              <Button\n                colorScheme={sortOption == 'date' ? 'linkedin' : 'gray'}\n                onClick={() => {\n                  setSortOption('date');\n                }}\n              >\n                By Date\n              </Button>\n            </div>\n          </div>\n          <div className=\"h-[80%] bg-gray-200 flex flex-col\">\n            <div className=\"h-[10%] flex text-[1.3rem] hover:cursor-pointer\">\n              {tabsMap()}\n            </div>\n            <div className=\"h-[90%] flex items-center justify-center \">\n              {props.byProduct?.allTransaction.length ? (\n                <div className=\"w-[100%] h-[100%] overflow-auto scrollbar\">\n                  <TableContainer>\n                    <Table variant={'striped'} colorScheme=\"blue\">\n                      <Thead>\n                        <Tr>\n                          <Th>Tanggal</Th>\n                          <Th>Transaction ID</Th>\n                          <Th>User</Th>\n                          <Th>User ID</Th>\n                          <Th>Product</Th>\n                          <Th>Quantity</Th>\n                          <Th>Total</Th>\n                        </Tr>\n                      </Thead>\n                      <Tbody>{tableSort()}</Tbody>\n                    </Table>\n                  </TableContainer>\n                </div>\n              ) : (\n                <div className=\"text-[1.5rem]\">No Transactions yet</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Laporan;\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    if (!session.user.user.isAdmin) {\n      return { redirect: { destination: '/' } };\n    }\n\n    const byProduct = await axiosInstance.get('transactions/all/products');\n\n    return { props: { byProduct: byProduct.data } };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error: error.message } };\n  }\n}\n","/Users/mac/Documents/Medbox-Client/pages/admin/laporan/index.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/admin/resep.js",["329"],[],"import AdminNavbar from '../../components/AdminNavbar';\nimport { useRouter } from 'next/router';\nimport {\n  Text,\n  VStack,\n  Button,\n  HStack,\n  Image,\n  ChakraProvider,\n  Box,\n  useToast,\n} from '@chakra-ui/react';\nimport { getSession } from 'next-auth/react';\nimport { useState, useEffect } from 'react';\nimport AdminPrescripCard from '../../components/AdminPrescripCard';\nimport axiosInstance from '../../src/config/api';\nimport theme from '../../components/theme';\n\nfunction DaftarTransaksiRacikan(props) {\n  const [transac, setTransac] = useState([]);\n  const [selected, setSelected] = useState(0);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(3);\n  const [prods, setProds] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  const router = useRouter();\n  const toast = useToast();\n  const path = router.pathname;\n\n  useEffect(() => {\n    fetchTransactions();\n    fetchProducts();\n  }, [selected, page]);\n\n  const onPrevClick = () => {\n    setPage(page - 1);\n  };\n\n  const onNextClick = () => {\n    setPage(page + 1);\n  };\n\n  const fetchProducts = async () => {\n    try {\n      const res = await axiosInstance.get('products');\n      setProds(res.data.data.resGetAllProducts);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const fetchTransactions = async () => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const config = {\n        params: { page, pageSize },\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n      const res = await axiosInstance.get(\n        `/transactions/admin/transactionsByPrescription`,\n        config,\n      );\n      setTransac(res.data.data.resFetchTransactions);\n      setHasMore(!res.data.data.resFetchTransactionsNext.length);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  function mappedTransactions() {\n    return transac?.map((transaction) => {\n      return (\n        <AdminPrescripCard\n          key={transaction.transaction_id}\n          prescriptionImage={transaction.prescriptionImage}\n          trans_id={transaction.transaction_id}\n          userId={transaction.user_id}\n          deliveryCost={transaction.deliveryCost}\n          createdAt={transaction.createdAt}\n          transac={transac}\n          props={props}\n          products={prods}\n        />\n      );\n    });\n  }\n\n  return (\n    <ChakraProvider theme={theme}>\n      <div className=\"flex w-[100vw] h-[100vh]\">\n        <AdminNavbar path={path} />\n        <VStack align=\"start\" w={'85%'} h={'100%'}>\n          <Box>\n            <Text\n              fontSize={21}\n              fontWeight={500}\n              marginTop={8}\n              marginBottom={4}\n              marginLeft={16}\n              marginRight={310}\n            >\n              Daftar Pesanan dengan Resep Dokter\n            </Text>\n          </Box>\n          {transac.length ? (\n            <div>{mappedTransactions()}</div>\n          ) : (\n            <VStack paddingTop={100} alignSelf=\"center\">\n              <Box align=\"center\">\n                <Image\n                  src=\"/admin/Empty-Transaction.png\"\n                  width={250}\n                  height={250}\n                  alt={''}\n                />\n                <Text paddingTop={6} fontSize={18}>\n                  Tidak Ada Pesanan\n                </Text>\n              </Box>\n            </VStack>\n          )}\n          {transac.length ? (\n            <HStack paddingLeft={510} paddingTop={5}>\n              <Button\n                marginRight={2}\n                onClick={onPrevClick}\n                isDisabled={page == 1}\n                colorScheme=\"messenger\"\n              >\n                Prev\n              </Button>\n              <Text paddingRight={2}>{page}</Text>\n              <Button\n                onClick={onNextClick}\n                isDisabled={hasMore}\n                colorScheme=\"messenger\"\n              >\n                Next\n              </Button>\n            </HStack>\n          ) : null}\n        </VStack>\n      </div>\n    </ChakraProvider>\n  );\n}\n\nexport default DaftarTransaksiRacikan;\n","/Users/mac/Documents/Medbox-Client/pages/admin/transaksi.js",["330"],[],"import AdminNavbar from '../../components/AdminNavbar';\nimport { useRouter } from 'next/router';\nimport {\n  Text,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tab,\n  VStack,\n  Button,\n  HStack,\n  Image,\n  ChakraProvider,\n  Input,\n  Box,\n  Select,\n  useToast,\n} from '@chakra-ui/react';\nimport { getSession, useSession } from 'next-auth/react';\nimport { useState, useEffect } from 'react';\nimport AdminTransCard from '../../components/AdminTransCard';\nimport AdminTransCardConfirmation from '../../components/AdminTransCardConfirmation';\nimport AdminPaymentConfirm from '../../components/AdminPaymentConfirm';\nimport axiosInstance from '../../src/config/api';\nimport theme from '../../components/theme';\n\nfunction Transaksi(props) {\n  const [transac, setTransac] = useState([]);\n  const [selected, setSelected] = useState(0);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(3);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [formState, setFormState] = useState({ InvoiceID: '' });\n\n  const router = useRouter();\n  const session = useSession();\n  const toast = useToast();\n\n  if (session.data) {\n    if (!session.data.user.user.isAdmin) {\n      router.replace('/');\n    }\n  }\n\n  const path = router.pathname;\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [selected, page]);\n\n  const onPrevClick = () => {\n    setPage(page - 1);\n  };\n\n  const onNextClick = () => {\n    setPage(page + 1);\n  };\n\n  const onHandleChange = (event) => {\n    setFormState({ ...formState, [event.target.name]: event.target.value });\n  };\n\n  const btnSearchHandler = () => {\n    let invoice_id = formState.invoiceID;\n    if (formState.invoiceID == '') {\n      invoice_id = 'undefined';\n    }\n    fetchTransactions('transaction_id', 'DESC', invoice_id);\n  };\n\n  const selectSortHandler = (event) => {\n    const sortBy = event.target.value;\n    switch (sortBy) {\n      case 'ascInvoice':\n        order_by = 'transaction_id';\n        ordered_method = 'ASC';\n        fetchTransactions(order_by, ordered_method);\n        break;\n      case 'descInvoice':\n        order_by = 'transaction_id';\n        ordered_method = 'DESC';\n        fetchTransactions(order_by, ordered_method);\n        break;\n      case 'ascDate':\n        order_by = 'createdAt';\n        ordered_method = 'ASC';\n        fetchTransactions(order_by, ordered_method);\n        break;\n      case 'descDate':\n        order_by = 'createdAt';\n        ordered_method = 'DESC';\n        fetchTransactions(order_by, ordered_method);\n        break;\n    }\n  };\n\n  let order_by = 'transaction_id';\n  let ordered_method = 'ASC';\n\n  const fetchTransactions = async (\n    order_by,\n    ordered_method,\n    transaction_id,\n  ) => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const config = {\n        params: { page, pageSize },\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n      const res = await axiosInstance.get(\n        `/transactions/admin/transactionsByIndex/${selected}?order_by=${order_by}&ordered_method=${ordered_method}&transaction=${transaction_id}`,\n        config,\n      );\n      setTransac(res.data.data.resFetchTransactions);\n      setFilteredTransactions(res.data.data.resFetchTransactions);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  function mappedTransactions() {\n    return filteredTransactions?.map((transaction) => {\n      return (\n        <AdminTransCard\n          key={transaction.transaction_id}\n          productName={transaction.transaction_details[0].product.productName}\n          productImage={transaction.transaction_details[0].product.productImage}\n          transaction_details={transaction.transaction_details}\n          status={transaction.status}\n          totalPrice={transaction.totalPrice}\n          trans_id={transaction.transaction_id}\n          courier={transaction.courier}\n          deliveryCost={transaction.deliveryCost}\n          createdAt={transaction.createdAt}\n          transac={transac}\n          props={props}\n        />\n      );\n    });\n  }\n\n  function mappedTransactionsPayment() {\n    return filteredTransactions?.map((transaction) => {\n      return (\n        <AdminPaymentConfirm\n          key={transaction.transaction_id}\n          productName={transaction.transaction_details[0].product.productName}\n          productImage={transaction.transaction_details[0].product.productImage}\n          transaction_details={transaction.transaction_details}\n          paymentProof={transaction.transaction_details[0].paymentProof}\n          status={transaction.status}\n          totalPrice={transaction.totalPrice}\n          trans_id={transaction.transaction_id}\n          courier={transaction.courier}\n          deliveryCost={transaction.deliveryCost}\n          createdAt={transaction.createdAt}\n          transac={transac}\n          fetchTransactions={fetchTransactions}\n          props={props}\n        />\n      );\n    });\n  }\n\n  function mappedTransactionsConfirmation() {\n    return filteredTransactions?.map((transaction) => {\n      return (\n        <AdminTransCardConfirmation\n          key={transaction.transaction_id}\n          productName={transaction.transaction_details[0].product.productName}\n          productImage={transaction.transaction_details[0].product.productImage}\n          transaction_details={transaction.transaction_details}\n          status={transaction.status}\n          totalPrice={transaction.totalPrice}\n          trans_id={transaction.transaction_id}\n          courier={transaction.courier}\n          deliveryCost={transaction.deliveryCost}\n          createdAt={transaction.createdAt}\n          transac={transac}\n          fetchTransactions={fetchTransactions}\n          props={props}\n        />\n      );\n    });\n  }\n\n  return (\n    <ChakraProvider theme={theme}>\n      <div className=\"flex w-[100vw] h-[100vh]\">\n        <AdminNavbar path={path} />\n        <VStack align=\"start\">\n          <Box>\n            <HStack>\n              <Text\n                fontSize={21}\n                fontWeight={500}\n                marginTop={3}\n                marginLeft={16}\n                marginRight={310}\n              >\n                Riwayat Transaksi\n              </Text>\n              <HStack paddingTop={6} paddingRight={70} fontSize={15}>\n                <Text>Urutkan</Text>\n                <Select\n                  name=\"sortBy\"\n                  width={180}\n                  marginTop={4}\n                  onChange={selectSortHandler}\n                  fontSize={14}\n                >\n                  <option value=\"ascInvoice\">No. Invoice Terlama</option>\n                  <option value=\"descInvoice\">No. Invoice Terbaru</option>\n                  <option value=\"ascDate\">Transaksi Terlama</option>\n                  <option value=\"descDate\">Transaksi Terbaru</option>\n                </Select>\n              </HStack>\n              <HStack paddingTop={4}>\n                <Input\n                  marginTop={2}\n                  name=\"invoiceID\"\n                  type=\"text\"\n                  placeholder=\"No. Invoice\"\n                  fontSize={14}\n                  fontWeight={400}\n                  onChange={onHandleChange}\n                  width={200}\n                />\n                <HStack paddingTop={2}>\n                  <Button\n                    fontSize={14}\n                    colorScheme=\"messenger\"\n                    onClick={btnSearchHandler}\n                  >\n                    Cari\n                  </Button>\n                </HStack>\n              </HStack>\n            </HStack>\n          </Box>\n          <Tabs\n            onChange={(index) => {\n              setSelected(index), setPage(1);\n            }}\n          >\n            <TabList marginLeft={16} marginTop={2}>\n              <Tab>Semua</Tab>\n              <Tab>Diproses</Tab>\n              <Tab>Sedang Dikirim</Tab>\n              <Tab>Berhasil</Tab>\n              <Tab>Tidak Berhasil</Tab>\n              <Tab>Menunggu Pembayaran</Tab>\n              <Tab>Menunggu Konfirmasi Pembayaran</Tab>\n            </TabList>\n            {transac.length ? (\n              <TabPanels>\n                <TabPanel>\n                  <div>{mappedTransactions()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactionsConfirmation()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactions()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactions()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactions()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactions()}</div>\n                </TabPanel>\n                <TabPanel>\n                  <div>{mappedTransactionsPayment()}</div>\n                </TabPanel>\n              </TabPanels>\n            ) : (\n              <VStack marginTop={105}>\n                <Image\n                  src=\"/admin/Empty-Transaction.png\"\n                  width={250}\n                  height={250}\n                  alt={''}\n                />\n                <Text paddingTop={6} fontSize={18}>\n                  Tidak Ada Transaksi\n                </Text>\n              </VStack>\n            )}\n          </Tabs>\n          {transac.length ? (\n            <HStack paddingLeft={510}>\n              <Button\n                marginRight={2}\n                onClick={onPrevClick}\n                isDisabled={page == 1}\n                colorScheme=\"messenger\"\n              >\n                Prev\n              </Button>\n              <Text paddingRight={2}>{page}</Text>\n              <Button\n                onClick={onNextClick}\n                isDisabled={page >= transac.length}\n                colorScheme=\"messenger\"\n              >\n                Next\n              </Button>\n            </HStack>\n          ) : null}\n        </VStack>\n      </div>\n    </ChakraProvider>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    if (!session.user.user.isAdmin) {\n      return { redirect: { destination: '/' } };\n    }\n\n    const { user_token } = session.user;\n\n    const config = {\n      headers: { Authorization: `Bearer ${user_token}` },\n    };\n\n    return {\n      props: { user_token },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: {} };\n  }\n}\n\nexport default Transaksi;\n","/Users/mac/Documents/Medbox-Client/pages/api/auth/[...nextauth].js",[],[],"/Users/mac/Documents/Medbox-Client/pages/api/hello.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/cart/[user_id].js",["331","332","333","334"],[],"import { getSession } from 'next-auth/react';\nimport React from 'react';\nimport Navbar from '../../components/Navbar';\nimport axiosInstance from '../../src/config/api';\nimport {\n  Text,\n  VStack,\n  Button,\n  Box,\n  ChakraProvider,\n  useDisclosure,\n  HStack,\n  Checkbox,\n  useToast,\n  Link,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport '@fontsource/poppins';\nimport { useState, useEffect } from 'react';\nimport CartCards from '../../components/CartCards';\nimport theme from '../../components/theme';\nimport SelectAddress from '../../components/SelectAddress';\nimport AddAddress from '../../components/AddAddress';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { useRouter } from 'next/router';\nimport GetDeliveryCost from '../../components/GetDeliveryCost';\n\nfunction Cart(props) {\n  const router = useRouter();\n  const [carts, setCarts] = useState([]);\n  const [empty, setEmpty] = useState(false);\n  const [userAllAddress, setUserAllAddress] = useState(props.userAllAddress);\n  const [selectAddress, setSelectAddress] = useState(props.defaultAddress);\n  const [selectedCourier, setSelectedCourier] = useState();\n  const [selectedDeliveryCost, setSelectedDeliveryCost] = useState();\n  const [modalSelectAddress, setModalSelectAddress] = useState(false);\n  const [modalSelectCourier, setModalSelectCourier] = useState(false);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { user_id } = props;\n  const [cartsPrice, setCartsPrice] = useState([]);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    fetchCarts();\n  }, []);\n\n  useEffect(() => {\n    RenderUserAddresses();\n  }, []);\n\n  const chooseAddress = (newAddress) => {\n    setSelectAddress(newAddress);\n  };\n\n  const RenderUserAddresses = async () => {\n    try {\n      const session = await getSession();\n\n      if (!session) return { redirect: { destination: '/login' } };\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const defaultAddress = await axiosInstance.get(\n        `/addresses/userdefaultaddress`,\n        config,\n      );\n      setSelectAddress(defaultAddress.data.data);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const fetchCarts = async () => {\n    try {\n      const session = await getSession();\n      const { user_id } = props;\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n      const res = await axiosInstance.get(`/carts/getCarts/${user_id}`, config);\n      setCarts(res.data.data);\n      if (!res.data.data.length) {\n        setEmpty(true);\n      }\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const countTotalPrice = (body) => {\n    const result = carts.reduce(\n      (acc, curr) => acc + curr.quantity * curr.product.productPrice,\n      0,\n    );\n    return result;\n  };\n\n  const onCheckoutClick = async () => {\n    try {\n      setCartsPrice(countTotalPrice());\n      const session = await getSession();\n      const { user_id } = props;\n      const { user_token } = session.user;\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n      const deliveryCost = selectedDeliveryCost.split(',');\n      const getDeliveryCost = parseInt(deliveryCost[1]);\n      const body = {\n        totalPrice: countTotalPrice(),\n        address_id: selectAddress.address_id,\n        courier: selectedCourier,\n        deliveryCost: getDeliveryCost,\n      };\n      const res = await axiosInstance.post(\n        `/transactions/createTransaction/`,\n        body,\n        config,\n      );\n      toast({\n        description: res.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      setTimeout(() => {\n        router.replace(`/transaction/${user_id}`);\n      }, 1000);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        description: 'Alamat dan Kurir Tidak Boleh Kosong',\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  function mappedProducts() {\n    return carts.map((cart, index) => {\n      return (\n        <CartCards\n          key={cart.cart_id}\n          product={cart.product}\n          quantity={cart.quantity}\n          fetchCarts={fetchCarts}\n          totalPrice={countTotalPrice}\n          props={props}\n        />\n      );\n    });\n  }\n\n  const renderCourier = () => {\n    const getCourier = selectedDeliveryCost.split(',');\n    const getSelectedCourier = `${selectedCourier.toUpperCase()}`;\n\n    return <Text>{getSelectedCourier}</Text>;\n  };\n\n  const renderDeliveryCost = () => {\n    const deliveryCost = selectedDeliveryCost.split(',');\n    const getDeliveryCost = parseInt(deliveryCost[1]).toLocaleString('id');\n    return (\n      <HStack\n        fontWeight={500}\n        fontSize={15}\n        justify=\"space-between\"\n        minWidth={393}\n      >\n        <HStack color=\"gray.600\">\n          <Text>Biaya Pengiriman :</Text>;\n          <Text>{selectedDeliveryCost && renderCourier()}</Text>;\n        </HStack>\n        <HStack fontWeight={600}>\n          <Text>Rp {getDeliveryCost}</Text>\n        </HStack>\n      </HStack>\n    );\n  };\n\n  const renderTotalPrice = () => {\n    const getTotalPrice = selectedDeliveryCost.split(',');\n    const deliveryCost = parseInt(getTotalPrice[1]);\n    let totalPrice = parseInt(countTotalPrice()) + deliveryCost;\n    return <Text>Rp {totalPrice.toLocaleString('id')}</Text>;\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Navbar />\n      {empty ? (\n        <VStack marginTop={105}>\n          <Image src=\"/admin/Empty-Transaction.png\" width={250} height={250} />\n          <Text paddingTop={6} fontSize={18}>\n            Wah! keranjang anda kosong!\n          </Text>\n        </VStack>\n      ) : (\n        <HStack>\n          <VStack marginLeft={105} width=\"110vH\" alignSelf=\"start\">\n            <Box\n              width=\"110vH\"\n              boxShadow=\"md\"\n              marginTop={5}\n              rounded=\"md\"\n              padding={6}\n            >\n              <Text fontWeight={600}>Alamat Pengiriman</Text>\n              {selectAddress ? (\n                <VStack align=\"start\" marginTop={5}>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    Penerima: {selectAddress.recipient}\n                  </Text>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    {selectAddress.addressDetail}\n                  </Text>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    {selectAddress.city_name}, {selectAddress.province},{' '}\n                    {selectAddress.postalCode}\n                  </Text>\n                  {userAllAddress ? (\n                    <VStack>\n                      <Button\n                        marginTop={3}\n                        bgColor=\"white\"\n                        _hover=\"white\"\n                        size=\"xxl\"\n                        variant=\"solid\"\n                        color=\"#1068A3\"\n                        fontSize={13}\n                        onClick={() => setModalSelectAddress(true)}\n                      >\n                        Pilih alamat lain\n                        <SelectAddress\n                          isOpen={modalSelectAddress}\n                          onClose={() => setModalSelectAddress(false)}\n                          userAllAddress={userAllAddress}\n                          chooseAddress={chooseAddress}\n                          RenderUserAddresses={RenderUserAddresses}\n                        />\n                      </Button>\n                    </VStack>\n                  ) : null}\n                </VStack>\n              ) : (\n                <VStack align=\"start\" marginTop={5}>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    Belum ada alamat\n                  </Text>\n                  <VStack align=\"start\" paddingTop={3}>\n                    <Button\n                      bgColor=\"white\"\n                      _hover=\"white\"\n                      size=\"xxl\"\n                      variant=\"solid\"\n                      color=\"#1068A3\"\n                      fontSize={13}\n                      onClick={onOpen}\n                    >\n                      <AddIcon w={2.5} h={2.5} color=\"#004776\" />\n                      <Text paddingLeft={1.5} paddingTop={0.3}>\n                        Tambahkan Alamat Baru\n                      </Text>\n                      <AddAddress\n                        isOpen={isOpen}\n                        onClose={onClose}\n                        RenderUserAddresses={RenderUserAddresses}\n                      />\n                    </Button>\n                  </VStack>\n                </VStack>\n              )}\n            </Box>\n            <Box width=\"110vH\" boxShadow=\"md\" rounded=\"md\" padding={6}>\n              <Text fontWeight={600}>Daftar Pesanan</Text>\n              {mappedProducts()}\n            </Box>\n          </VStack>\n          <VStack alignSelf=\"start\">\n            <Box\n              width=\"57vH\"\n              boxShadow=\"md\"\n              rounded=\"md\"\n              padding={6}\n              marginLeft={1}\n              marginTop={5}\n            >\n              <Text fontWeight={600}>Metode Pengiriman</Text>\n              <HStack marginY={6}>\n                <Button\n                  bgColor=\"white\"\n                  _hover=\"white\"\n                  size=\"xxl\"\n                  variant=\"solid\"\n                  color=\"#1068A3\"\n                  fontSize={13}\n                  onClick={() => setModalSelectCourier(true)}\n                >\n                  <Text paddingTop={0.3}>Pilih Metode Pengiriman</Text>\n                  <GetDeliveryCost\n                    isOpen={modalSelectCourier}\n                    onClose={() => setModalSelectCourier(false)}\n                    destination={selectAddress?.city_id}\n                    setSelectedDeliveryCost={setSelectedDeliveryCost}\n                    setSelectedCourier={setSelectedCourier}\n                  />\n                </Button>\n              </HStack>\n              <Text fontWeight={600}>Ringkasan Pembayaran</Text>\n              <HStack justifyContent=\"space-between\" marginTop={6}>\n                <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                  Sub Total\n                </Text>\n                <HStack fontWeight={550} fontSize={15} paddingRight={''}>\n                  <Text>Rp {countTotalPrice().toLocaleString('id')}</Text>\n                </HStack>\n              </HStack>\n              <HStack\n                justifyContent=\"space-between\"\n                marginTop={4}\n                marginBottom={2}\n                w={'100%'}\n              >\n                <HStack w={'100%'}>\n                  <Text>{selectedDeliveryCost && renderDeliveryCost()}</Text>\n                </HStack>\n              </HStack>\n              <Image src=\"/profile/line.png\" width={400} height={1.5} />\n              <HStack justifyContent=\"space-between\" marginTop={4}>\n                <Text fontWeight={600} fontSize={15} color=\"gray.600\">\n                  Total\n                </Text>\n                <Text fontWeight={550} fontSize={15} color=\"#004776\">\n                  {selectedDeliveryCost && renderTotalPrice()}\n                </Text>\n              </HStack>\n              <VStack align=\"start\" marginTop=\"10\">\n                <Text fontWeight={600} fontSize={15}>\n                  Metode Pembayaran\n                </Text>\n              </VStack>\n              <VStack align=\"start\" marginTop=\"2\">\n                <Checkbox fontWeight={500} color=\"gray.600\" size=\"sm\">\n                  Transfer Bank BCA\n                </Checkbox>\n              </VStack>\n              <VStack marginTop={8}>\n                <Button\n                  fontSize={13}\n                  color=\"white\"\n                  colorScheme=\"messenger\"\n                  fontWeight={500}\n                  width={250}\n                  onClick={onCheckoutClick}\n                >\n                  Lanjutkan Pembayaran\n                </Button>\n              </VStack>\n            </Box>\n          </VStack>\n        </HStack>\n      )}\n    </ChakraProvider>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    const { user_token } = session.user;\n\n    const config = {\n      headers: { Authorization: `Bearer ${user_token}` },\n    };\n\n    const { user_id } = context.params;\n\n    const userAllAddress = await axiosInstance.get(\n      `/addresses/useraddresslists`,\n      config,\n    );\n    const defaultAddress = await axiosInstance.get(\n      `/addresses/userdefaultaddress`,\n      config,\n    );\n\n    return {\n      props: {\n        user_id,\n        user_token,\n        userAllAddress: userAllAddress.data.data,\n        defaultAddress: defaultAddress.data.data,\n        session,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error } };\n  }\n}\n\nexport default Cart;\n","/Users/mac/Documents/Medbox-Client/pages/change-password/index.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/detailPage/[product_id].js",[],[],"/Users/mac/Documents/Medbox-Client/pages/forgotPassword.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/index.js",["335"],[],"import Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport Link from \"next/link\";\nimport {\n  Button,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Skeleton,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { getSession } from \"next-auth/react\";\nimport axiosInstance from \"../src/config/api\";\nimport { useRouter } from \"next/router\";\nimport { api_origin } from \"../constraint/index\";\n\nexport default function Home(props) {\n  const [hasMore, setHasMore] = useState();\n  const [products, setProducts] = useState();\n  const [productsPage, setProductsPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { session, fetchedCategories } = props;\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchProducts();\n  }, [productsPage]);\n\n  function categoriesMap() {\n    if (!fetchedCategories) {\n      return \"Empty Categories\";\n    }\n\n    return fetchedCategories.map((category) => {\n      return (\n        <div\n          key={category.category_lists_id}\n          onClick={() => {\n            router.replace(\n              `/productCatalog/${category.category_lists_id}=category=1`\n            );\n          }}\n          className=\"flex flex-col hover:cursor-pointer flex-none items-center justify-start w-[25%] desktop:flex-row desktop:h-[9vh] desktop:w-[31%] desktop:bg-white desktop:shadow-[0px_6px_20px_0px_rgba(0,28,47,0.05)]\"\n        >\n          <div className=\"w-[35px] h-[35px] desktop:w-[3.5vw] desktop:h-[3.5vw] desktop:mx-[1vw]\">\n            <Image\n              unoptimized\n              alt=\"resep-logo\"\n              layout=\"responsive\"\n              width={35}\n              height={35}\n              src={api_origin + category.categoryImage}\n              loader={() => {\n                return api_origin + category.categoryImage;\n              }}\n            />\n          </div>\n          <p className=\"text-[12px] desktop:text-[14px] desktop:font-[500] desktop:font-[#262626]\">\n            {category.category}\n          </p>\n        </div>\n      );\n    });\n  }\n\n  function productsMap() {\n    if (!products) {\n      const skeleton = [1, 2, 3, 4];\n\n      return skeleton.map((skeletonNumber) => {\n        return (\n          <div\n            key={skeletonNumber}\n            className=\"w-[35vw] mx-[3vw] h-[100%] flex-none flex flex-col items-center desktop:w-[10vw]\"\n          >\n            <Skeleton height={\"60%\"} width={\"100%\"} marginY={\"1vh\"} />\n            <Skeleton height={\"10%\"} width={\"100%\"} marginY={\"1vh\"} />\n            <Skeleton height={\"15%\"} width={\"100%\"} marginY={\"1vh\"} />\n          </div>\n        );\n      });\n    }\n\n    return products.map((product) => {\n      return (\n        <div\n          key={product.product_id}\n          className=\"w-[35vw] mx-[3vw] h-[100%] flex-none flex flex-col items-center desktop:w-[10vw]\"\n        >\n          <div className=\"w-[100%] my-[3vh] hover:cursor-pointer\">\n            <Image\n              unoptimized\n              alt=\"resep-logo\"\n              layout=\"responsive\"\n              width={102}\n              height={66}\n              src={api_origin + product.productImage}\n              loader={() => {\n                return api_origin + product.productImage;\n              }}\n            />\n          </div>\n          <p className=\"text-[12px] w-[100%]\">\n            {product.productName.length <= 25\n              ? product.productName\n              : `${product.productName.slice(0, 20)}...`}\n          </p>\n          <div className=\"flex bg-white w-[100%] items-center text-[#6E6E6E]\">\n            <p className=\"text-[10px] font-[400]\">{product.packageType}</p>\n            <p className=\"text-[10px] font-[400] mx-[1vw]\">-</p>\n            <p className=\"text-[10px] font-[400]\">\n              Stok {product.productStock}\n            </p>\n          </div>\n          <p className=\"font-[500] text-[12px] w-[100%]\">\n            Rp.{product.productPrice.toLocaleString(\"id\")}\n          </p>\n          <div className=\"grow\" />\n          <div className=\"w-[100%]\">\n            <Button\n              onClick={() => {\n                router.replace(`/detailPage/${product.product_id}`);\n              }}\n              variant=\"outline\"\n              colorScheme=\"linkedin\"\n              disabled={!props.session?.user.user.isVerified}\n              sx={{ width: \"100%\", height: \"5vh\", marginBottom: \"6vh\" }}\n            >\n              <p className=\"text-[12px]\">Tambah</p>\n            </Button>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  async function fetchProducts() {\n    try {\n      console.log(\"jalan\");\n      const newProducts = await axiosInstance.get(\"/products/landingPage\", {\n        params: { limit: 4, productsPage },\n      });\n\n      console.log({ newProducts });\n\n      setProducts(newProducts.data.landingPageProducts);\n      setHasMore(newProducts.data.hasMore);\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  return (\n    <div className=\"bg-white w-[100%] h-[100vh] relative z-[1] desktop:scrollbar\">\n      <Navbar />\n      <div id=\"box biru\" className=\"bg-[#1068A3] h-[53px] desktop:hidden\" />\n      <div id=\"hero-desktop\" className=\"relative hidden desktop:inline\">\n        <p className=\"absolute z-[2] text-white font-[400] text-[4vw] left-[15vw] bottom-[200px]\">\n          Your Pharmacy, <br /> Everywhere\n        </p>\n        <Link href={\"/productCatalog\"}>\n          <p className=\"absolute z-[2] text-white font-[500] text-[14px] bottom-[55px] left-[15vw] underline underline-offset-4 decoration-white hover:cursor-pointer\">\n            Lihat Semua Obat\n          </p>\n        </Link>\n        <div\n          id=\"searchbar desktop\"\n          className=\"bg-[#F5F6F6] flex absolute w-[40vw] h-[8vh] z-[2] left-[15vw] bottom-[10vh] justify-end\"\n        >\n          <Input\n            variant=\"unstyled\"\n            placeholder=\"Cari Obat\"\n            sx={{ paddingLeft: \"5%\" }}\n            onChange={(event) => {\n              setSearchQuery(event.target.value);\n            }}\n          />\n          <div\n            onClick={() => {\n              router.replace(`/productCatalog/${searchQuery}=key=1`);\n            }}\n            className=\"bg-[#008DEB] flex items-center justify-center w-[20%] hover:cursor-pointer\"\n          >\n            <Image\n              src=\"/landingpage/Search-desktop.png\"\n              alt=\"arrow-logo\"\n              layout=\"fixed\"\n              width={24}\n              height={24}\n            />\n          </div>\n        </div>\n        <Image\n          src=\"/landingpage/Hero-desktop.svg\"\n          alt=\"arrow-logo\"\n          layout=\"responsive\"\n          width={1440}\n          height={408}\n        />\n      </div>\n      <div className=\"w-[100%] desktop:flex desktop:flex-col desktop:items-center\">\n        <div id=\"resep doktor\" className=\"desktop:w-[70%]\">\n          <p className=\"font-[500] text-[22px] hidden desktop:flex desktop:mt-[5vh]\">\n            Punya Resep dari Dokter?\n          </p>\n          <div className=\"flex bg-[#F2F8FC] items-center w-[94vw] h-[10vh] mt-[7vh] ml-[3vw] desktop:w-[100%] desktop:mt-0 desktop:ml-0\">\n            <div className=\"mx-[25px] mt-[10px]\">\n              <Image\n                src=\"/landingpage/Punya-resep.png\"\n                alt=\"resep-logo\"\n                layout=\"fixed\"\n                width={35}\n                height={35}\n              />\n            </div>\n            <div className=\"mr-[80px]\">\n              <p className=\"font-[500] text-[14px] desktop:hidden\">\n                Punya Resep Dokter?\n              </p>\n              <p className=\"font-[500] text-[14px] desktop:inline hidden\">\n                Unggah Resep\n              </p>\n              <p className=\"font-[400] w-[150px] desktop:w-[50vw] text-[12px] text-[#6E6E6E]\">\n                klik disini untuk kirim foto resep dokter\n              </p>\n            </div>\n            <div className=\"w-[18px] h-[14px] desktop:hidden\">\n              <Image\n                src=\"/landingpage/Arrow.png\"\n                alt=\"arrow-logo\"\n                layout=\"responsive\"\n                width={18}\n                height={14}\n              />\n            </div>\n            <div className=\"hidden desktop:inline\">\n              <Link href={session ? \"/upload-prescription-image\" : \"/login\"}>\n                <Button\n                  variant=\"outline\"\n                  colorScheme=\"linkedin\"\n                  sx={{ width: \"8vw\", height: \"6vh\" }}\n                >\n                  <p className=\"font-[500] text-[.9rem]\">Unggah Resep</p>\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div id=\"kategori obat\" className=\"mt-[4 vh] desktop:w-[70%]\">\n          <p className=\"flex pl-[4vw] mt-[3vh] mb-[2vh] font-[500] text-[16px] desktop:text-[22px] w-[100%] desktop:pl-0\">\n            Jelajahi Kategori Obat\n          </p>\n          <div className=\"w-[100%] h-[30vh] items-center flex flex-wrap justify-evenly\">\n            {categoriesMap()}\n          </div>\n        </div>\n        <div\n          id=\"Rekomendasi Obat & Vitamin\"\n          className=\"mt-[4 vh] desktop:w-[70%]\"\n        >\n          <p className=\"flex pl-[4vw] font-[500] text-[16px] desktop:text-[22px] w-[100%] desktop:pl-0\">\n            Rekomendasi Obat & Vitamin\n          </p>\n          <div className=\"w-[100%] h-[40vh] flex items-center justify-between\">\n            <Button\n              disabled={productsPage == 1}\n              onClick={() => {\n                setProductsPage(productsPage - 1);\n              }}\n              width={\"5vh\"}\n              height={\"5vh\"}\n              rounded={\"50%\"}\n            >\n              {\"<<\"}\n            </Button>\n            <div className=\"flex w-[100%]\">{productsMap()}</div>\n            <Button\n              disabled={productsPage == 3}\n              onClick={() => {\n                setProductsPage(productsPage + 1);\n              }}\n              width={\"5vh\"}\n              height={\"5vh\"}\n              rounded={\"50%\"}\n            >\n              {\">>\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    const fetchedCategories = await axiosInstance.get(\n      \"categories/getLandingCategories\"\n    );\n\n    return {\n      props: {\n        session,\n        fetchedCategories: fetchedCategories.data.resGetCategories,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: {} };\n  }\n}\n","/Users/mac/Documents/Medbox-Client/pages/login.js",["336"],[],"/Users/mac/Documents/Medbox-Client/pages/productCatalog/[params].js",["337","338"],[],"import { Button, Input, Link } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../../components/Navbar';\nimport axiosInstance from '../../src/config/api';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { useRouter } from 'next/router';\nimport Image from 'next/image';\nimport { getSession } from 'next-auth/react';\nimport { api_origin } from '../../constraint/index';\n\nfunction ProductCatalog(props) {\n  const [selected, setSelected] = useState('');\n  const [showCategories, setShowCategories] = useState(false);\n  const [showSort, setShowSort] = useState(false);\n  const [productList, setProductList] = useState(props.products);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchKeyword, setSearchKeyword] = useState('');\n\n  const router = useRouter();\n  const { session } = props;\n\n  useEffect(() => {\n    const { params } = router.query;\n    setSelected(params);\n    setProductList(props.products);\n  });\n\n  useEffect(() => {\n    const { params } = router.query;\n    if (params.includes('key')) {\n      const splitParams = params.split('=');\n      setSearchKeyword(splitParams[0]);\n    }\n  }, []);\n\n  function showCategoriesSwitch() {\n    setShowCategories(!showCategories);\n  }\n\n  function showSortSwitch() {\n    setShowSort(!showSort);\n  }\n\n  function productMap() {\n    return productList?.map((product) => {\n      return (\n        <div\n          key={product.product_id}\n          className=\"w-[13%] mx-[2vw] mb-[-2vh] h-[35vh] flex-none flex flex-col items-center shadow-[0px_6px_20px_0px_rgba(0,28,47,0.05)]\"\n        >\n          <div className=\"w-[100%] my-[3vh] hover:cursor-pointer\">\n            <Image\n              unoptimized\n              alt=\"resep-logo\"\n              layout=\"responsive\"\n              width={100}\n              height={70}\n              src={api_origin + product.productImage}\n              loader={() => {\n                return api_origin + product.productImage;\n              }}\n            />\n          </div>\n          <p className=\"text-[12px] w-[100%]\">\n            {product.productName.length <= 25\n              ? product.productName\n              : `${product.productName.slice(0, 20)}...`}\n          </p>\n          <div className=\"flex bg-white w-[100%] items-center text-[#6E6E6E]\">\n            <p className=\"text-[10px] font-[400]\">{product.packageType}</p>\n            <p className=\"text-[10px] font-[400] mx-[1vw]\">-</p>\n            <p className=\"text-[10px] font-[400]\">\n              Stok {product.productStock}\n            </p>\n          </div>\n          <p className=\"font-[500] text-[12px] w-[100%]\">\n            Rp.{product.productPrice.toLocaleString('id')}\n          </p>\n          <div className=\"grow\" />\n          <div className=\"w-[100%]\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                if (session?.user.user.isVerified) {\n                  router.replace(`/detailPage/${product.product_id}`);\n                } else {\n                  router.replace('/login');\n                }\n              }}\n              colorScheme=\"linkedin\"\n              sx={{ width: '100%', height: '5vh' }}\n              disabled={!session?.user.user.isVerified}\n            >\n              <p className=\"text-[12px]\">Tambah</p>\n            </Button>\n            {/* <Button\n                variant=\"outline\"\n                colorScheme=\"linkedin\"\n                sx={{ width: '100%', height: '5vh' }}\n                disabled={!props.session?.user.user.isVerified}\n              >\n                <p className=\"text-[12px]\">Tambah</p>\n              </Button> */}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  function categoriesMap() {\n    return props.categoriesLists?.categories.map((category) => {\n      const selectedCategoryListsId = selected.split('=')[0];\n\n      return (\n        <div\n          key={category.category_lists_id}\n          onClick={() => {\n            router.replace(\n              `/productCatalog/${category.category_lists_id}=category=1`,\n            );\n            setCurrentPage(1);\n            setSearchKeyword('');\n          }}\n          className={\n            selectedCategoryListsId == category.category_lists_id\n              ? 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-[#008DEB] cursor-pointer bg-cyan-100'\n              : 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n          }\n        >\n          {category.category.length <= 15\n            ? category.category\n            : `${category.category.slice(0, 15)}...`}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <div className=\"w-[100vw] h-[100vh] flex flex-col overflow-hidden\">\n      <Navbar />\n      <div className=\"flex w-[100%] h-[92%] items-end justify-center\">\n        <div className=\"flex w-[92%] h-[96%]\">\n          <div className=\"bg-cya-500 bg-white w-[14%] h-[100%] flex flex-col pr-[.5vw]\">\n            <div className=\"border-b-[.1px] border-black p-[1vh]\">\n              <p\n                onClick={() => {\n                  router.replace(`/productCatalog/semuaObat=1`);\n                  setCurrentPage(1);\n                  setSearchKeyword('');\n                }}\n                className={\n                  selected.includes('semuaObat')\n                    ? 'text-[1.2rem] font-[500] py-[1vh] px-[2vh] rounded-[2vw] border-solid border-[1px] rounded-[2vw] border-[#008DEB] cursor-pointer bg-cyan-100'\n                    : 'text-[1.2rem] font-[500] py-[1vh] px-[2vh] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n                }\n              >\n                Semua Obat\n              </p>\n            </div>\n            <div\n              id=\"categories\"\n              className=\"border-b-[.1px] border-black p-[1vh]\"\n            >\n              <div\n                onClick={showCategoriesSwitch}\n                className=\"text-[1.2rem] font-[500] flex hover:cursor-pointer justify-between\"\n              >\n                <p>Kategori</p>\n                <div\n                  className={\n                    showCategories\n                      ? 'w-[5%] flex items-center justify-center rotate-90 transition duration-100'\n                      : 'w-[5%] flex items-center justify-center transition duration-100'\n                  }\n                >\n                  <FontAwesomeIcon icon={faCaretRight} />\n                </div>\n              </div>\n              <div\n                className={\n                  showCategories ? 'overflow-auto scrollbar h-[35vh]' : ''\n                }\n              >\n                {showCategories ? categoriesMap() : ''}\n              </div>\n            </div>\n            <div id=\"sort\" className=\"border-b-[.1px] border-black p-[1vh]\">\n              <div\n                onClick={showSortSwitch}\n                className=\"text-[1.2rem] font-[500] flex hover:cursor-pointer justify-between\"\n              >\n                <p className=\"text-[1.2rem] font-[500]\">Sort By</p>\n                <div\n                  className={\n                    showSort\n                      ? 'w-[5%] flex items-center justify-center rotate-90 transition duration-100'\n                      : 'w-[5%] flex items-center justify-center transition duration-100'\n                  }\n                >\n                  <FontAwesomeIcon icon={faCaretRight} />\n                </div>\n              </div>\n              <div className={showSort ? 'flex flex-col mt-[2vh]' : 'hidden'}>\n                <div\n                  onClick={() => {\n                    router.replace(`/productCatalog/sort=productPrice=ASC=1`);\n                    setCurrentPage(1);\n                    setSearchKeyword('');\n                  }}\n                  className={\n                    selected.includes('sort=productPrice=ASC')\n                      ? 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-[#008DEB] cursor-pointer bg-cyan-100'\n                      : 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n                  }\n                >\n                  Price Asc\n                </div>\n                <div\n                  onClick={() => {\n                    router.replace(`/productCatalog/sort=productPrice=DESC=1`);\n                    setCurrentPage(1);\n                    setSearchKeyword('');\n                  }}\n                  className={\n                    selected.includes('sort=productPrice=DESC')\n                      ? 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-[#008DEB] cursor-pointer bg-cyan-100'\n                      : 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n                  }\n                >\n                  Price Desc\n                </div>\n                <div\n                  onClick={() => {\n                    router.replace(`/productCatalog/sort=productName=ASC=1`);\n                    setCurrentPage(1);\n                    setSearchKeyword('');\n                  }}\n                  className={\n                    selected.includes('sort=productName=ASC')\n                      ? 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-[#008DEB] cursor-pointer bg-cyan-100'\n                      : 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n                  }\n                >\n                  Name Asc\n                </div>\n                <div\n                  onClick={() => {\n                    router.replace(`/productCatalog/sort=productName=DESC=1`);\n                    setCurrentPage(1);\n                    setSearchKeyword('');\n                  }}\n                  className={\n                    selected.includes('sort=productName=DESC')\n                      ? 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-[#008DEB] cursor-pointer bg-cyan-100'\n                      : 'p-[1vh] my-[1vh] font-[400] text-[1.1rem] rounded-[2vw] border-solid border-[1px] border-transparent hover:border-[#008DEB] hover:cursor-pointer hover:bg-cyan-100'\n                  }\n                >\n                  Name Desc\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"w-[86%] h-[100%] flex flex-col\">\n            <div className=\"flex w-[80%] justify-between\">\n              <div\n                id=\"searchbar desktop\"\n                className=\"bg-[#F5F6F6] flex w-[35vw] h-[7vh] z-[2] left-[15vw] bottom-[88px] justify-end ml-[5vw]\"\n              >\n                <Input\n                  onChange={(event) => {\n                    setSearchKeyword(event.target.value);\n                  }}\n                  value={searchKeyword}\n                  variant=\"unstyled\"\n                  placeholder=\"Cari Obat\"\n                  sx={{ paddingLeft: '5%' }}\n                />\n                <div\n                  onClick={() => {\n                    router.replace(`/productCatalog/${searchKeyword}=key=1`);\n                    setCurrentPage(1);\n                  }}\n                  className=\"bg-[#008DEB] flex items-center justify-center w-[20%] hover:cursor-pointer\"\n                >\n                  <Image\n                    src=\"/landingpage/Search-desktop.png\"\n                    alt=\"arrow-logo\"\n                    layout=\"fixed\"\n                    width={24}\n                    height={24}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"h-[85%] flex flex-wrap overflow-auto scrollbar\">\n              {productMap()}\n            </div>\n\n            <div className=\"w-[100%] flex justify-end\">\n              <div className=\"w-[10%] flex justify-between\">\n                <Button\n                  size=\"lg\"\n                  disabled={currentPage <= 1}\n                  colorScheme=\"linkedin\"\n                  onClick={() => {\n                    setCurrentPage(currentPage - 1);\n\n                    const splitParams = router.query.params.split('=');\n\n                    splitParams[splitParams.length - 1] =\n                      parseInt(splitParams[splitParams.length - 1]) - 1;\n\n                    const joinParams = splitParams.join('=');\n\n                    router.replace(`/productCatalog/${joinParams}`);\n                  }}\n                >\n                  {'<'}\n                </Button>\n                <div className=\"h-[100%] w-[7vw] flex items-center justify-center\">\n                  {currentPage}\n                </div>\n                <Button\n                  onClick={() => {\n                    setCurrentPage(currentPage + 1);\n\n                    const splitParams = router.query.params.split('=');\n\n                    splitParams[splitParams.length - 1] =\n                      parseInt(splitParams[splitParams.length - 1]) + 1;\n\n                    const joinParams = splitParams.join('=');\n\n                    router.replace(`/productCatalog/${joinParams}`);\n                  }}\n                  disabled={!props.hasMore}\n                  size=\"lg\"\n                  colorScheme=\"linkedin\"\n                >\n                  {'>'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n    const resGetCategoriesLists = await axiosInstance.get('categories/getAll');\n\n    let resGetProducts = '';\n\n    if (context.params.params.includes('semuaObat')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[1];\n\n      resGetProducts = await axiosInstance.get('products/all', {\n        params: { page, limit: 10 },\n      });\n    } else if (context.params.params.includes('sort')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/sort/${context.params.params}`,\n        { params: { page, limit: 10 } },\n      );\n    } else if (context.params.params.includes('category')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/byCategory/${context.params.params}`,\n        { params: { page, limit: 10 } },\n      );\n    } else if (context.params.params.includes('key')) {\n      const splitParams = context.params.params.split('=');\n\n      const page = splitParams[splitParams.length - 1];\n\n      resGetProducts = await axiosInstance.get(\n        `products/specifics/${splitParams[0]}`,\n        {\n          params: { page, limit: 10 },\n        },\n      );\n    }\n    const { user_id } = context.params;\n\n    const res = await axiosInstance.get(`/users/${user_id}`);\n\n    return {\n      props: {\n        params: context.params,\n        categoriesLists: resGetCategoriesLists.data,\n        products: resGetProducts.data.products,\n        hasMore: resGetProducts.data.hasMore,\n        users: res.data,\n        session,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { Error: error.message } };\n  }\n}\n\nexport default ProductCatalog;\n","/Users/mac/Documents/Medbox-Client/pages/productCatalog/index.js",["339"],[],"import { useRouter } from 'next/router';\nimport React, { useEffect } from 'react';\n\nfunction Index() {\n  const router = useRouter();\n\n  useEffect(() => {\n    router.replace('/productCatalog/semuaObat=1');\n  }, []);\n\n  return <div></div>;\n}\n\nexport default Index;\n","/Users/mac/Documents/Medbox-Client/pages/profile/edit.js",["340","341","342","343"],[],"import { useState } from 'react';\nimport { getSession } from 'next-auth/react';\nimport axiosInstance from '../../src/config/api';\nimport '@fontsource/poppins';\nimport { Formik, Form } from 'formik';\nimport { TextFieldProfile } from '../../components/textFieldProfile';\nimport * as Yup from 'yup';\nimport Navbar from '../../components/Navbar';\nimport {\n  Text,\n  VStack,\n  Button,\n  Link,\n  Show,\n  HStack,\n  ChakraProvider,\n  Container,\n  Select,\n  Box,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport NextLink from 'next/link';\nimport theme from '../../components/theme';\nimport { useRouter } from 'next/router';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport { api_origin } from '../../constraint';\n\nfunction Edit(props) {\n  const router = useRouter();\n  const [avatar, setAvatar] = useState({});\n  const [user, setUser] = useState(props.user);\n  const [birthDateIsSet, setBirthDateIsSet] = useState(false);\n  const [imgSource, setimgSource] = useState(api_origin + props.user.avatar);\n\n  const toast = useToast();\n\n  const { name, email, gender, birthDate, phoneNumber } = user;\n\n  const onSaveAvatarUpdate = async () => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const body = new FormData();\n\n      body.append('avatar', avatar);\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const res = await axiosInstance.patch('/users/avatar', body, config);\n\n      toast({\n        description: res.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.log({ Error });\n      toast({\n        description: error.response.data.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const onSaveProfileUpdate = async ({\n    fullName,\n    phoneNumber,\n    email,\n    gender,\n    birthDate,\n  }) => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const body = {\n        name: fullName,\n        phoneNumber,\n        email,\n        gender,\n        birthDate,\n      };\n\n      const res = await axiosInstance.patch('/users/profile', body, config);\n      toast({\n        description: res.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      setTimeout(() => {\n        router.replace('/profile');\n      }, 1000);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const validate = Yup.object({\n    fullName: Yup.string()\n      .max(50, 'Must be 50 characters or less')\n      .required('Required'),\n    phoneNumber: Yup.string()\n      .max(15, 'Must be 15 characters or less')\n      .required('Phone Number is Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    startDate: Yup.string(),\n  });\n\n  const onFileChange = (event) => {\n    setAvatar(event.target.files[0]);\n    setimgSource(URL.createObjectURL(event.target.files[0]));\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Show above=\"md\">\n        <Navbar />\n      </Show>\n      <Container>\n        <Box\n          marginTop={{ md: '3' }}\n          marginBottom={{ md: '8' }}\n          boxShadow={{ md: 'xl' }}\n          p={{ md: '6' }}\n          rounded={{ md: 'md' }}\n          bg=\"white\"\n        >\n          <Show below=\"md\">\n            <HStack marginTop={9} marginLeft={4} marginBottom={5}>\n              <NextLink href=\"/profile\">\n                <Link>\n                  <Image src=\"/profile/back.png\" width={16} height={16} />\n                </Link>\n              </NextLink>\n              <Text\n                paddingBottom={1}\n                paddingLeft={2}\n                fontSize={16}\n                fontWeight={600}\n                color=\"#49454F\"\n              >\n                Ubah Profil\n              </Text>\n            </HStack>\n          </Show>\n          <VStack>\n            <Image\n              className=\"rounded-full\"\n              src={imgSource}\n              loader={() => {\n                return imgSource;\n              }}\n              layout={'fixed'}\n              width={86}\n              height={86}\n            />\n          </VStack>\n          <VStack marginTop={4}>\n            <VStack\n              paddingLeft={{ base: '10vH', md: '90' }}\n              fontSize={{ base: '10', md: '13' }}\n            >\n              <input type={'file'} onChange={onFileChange} />\n            </VStack>\n            <HStack paddingBottom={3}>\n              <Button onClick={onSaveAvatarUpdate} size=\"sm\" bgColor=\"white\">\n                <Image src=\"/profile/edit-blue.png\" width={12} height={12} />\n                <Text\n                  paddingLeft={2}\n                  fontWeight={600}\n                  fontSize={{ base: '13', md: '16' }}\n                  color=\"#008DEB\"\n                >\n                  Ubah Foto Profil\n                </Text>\n              </Button>\n            </HStack>\n            <Image src=\"/profile/line.png\" width={327} height={2} />\n            <VStack\n              alignSelf=\"start\"\n              paddingLeft={3}\n              paddingTop={2}\n              paddingBottom={1}\n            >\n              <Text\n                fontWeight={600}\n                fontSize={{ base: '16', md: '19' }}\n                paddingLeft={{ md: '90' }}\n              >\n                Info Profil\n              </Text>\n            </VStack>\n            <Formik\n              initialValues={{\n                fullName: name || null,\n                phoneNumber: phoneNumber,\n                email: email,\n                gender: 'Male' || null,\n                birthDate: birthDate ? birthDate.slice(0, 10) : null,\n              }}\n              validationSchema={validate}\n              onSubmit={(values) => {\n                const fixdate = moment(\n                  new Date(values.startDate),\n                  'DD-MM-YYYY',\n                ).add(1, 'days');\n\n                onSaveProfileUpdate({\n                  fullName: values.fullName,\n                  phoneNumber: values.phoneNumber,\n                  email: values.email,\n                  gender: values.gender,\n                  birthDate: fixdate,\n                });\n              }}\n            >\n              {({ values, handleSubmit, setFieldValue }) => (\n                <Form>\n                  <TextFieldProfile label=\"Nama\" name=\"fullName\" type=\"text\" />\n                  <TextFieldProfile\n                    label=\"Nomor Telepon\"\n                    name=\"phoneNumber\"\n                    type=\"text\"\n                    disabled\n                  />\n                  <TextFieldProfile label=\"Email\" name=\"email\" type=\"text\" />\n                  <Text marginBottom={2} fontWeight={600} fontSize={14}>\n                    Gender\n                  </Text>\n                  <Select\n                    name=\"gender\"\n                    onChange={(event) =>\n                      setFieldValue('gender', event.target.value)\n                    }\n                    value={values.gender}\n                    width={320}\n                    height={8}\n                    fontWeight={400}\n                    fontSize={13.5}\n                    marginBottom={4}\n                  >\n                    <option value=\"male\">Male</option>\n                    <option value=\"female\">Female</option>\n                  </Select>\n                  <VStack\n                    fontWeight={600}\n                    align=\"start\"\n                    fontSize={14}\n                    marginBottom={2}\n                  >\n                    <Text>Tanggal Lahir</Text>\n                  </VStack>\n                  <VStack fontSize={13} marginBottom={2}>\n                    <DatePicker\n                      bgColor=\"red\"\n                      selected={values.startDate}\n                      dateFormat=\"yyyy-MM-dd\"\n                      className=\"form-control w-80 h-8\"\n                      name=\"startDate\"\n                      onChange={(date) => {\n                        setBirthDateIsSet(true);\n                        setFieldValue('startDate', date);\n                      }}\n                    />\n                  </VStack>\n                  <Button\n                    colorScheme=\"messenger\"\n                    width={310}\n                    marginTop={4}\n                    color=\"white\"\n                    fontWeight={500}\n                    fontSize={14}\n                    type=\"submit\"\n                    marginBottom={6}\n                    onClick={handleSubmit}\n                  >\n                    Simpan Perubahan\n                  </Button>\n                </Form>\n              )}\n            </Formik>\n          </VStack>\n        </Box>\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    const { user_token } = session.user;\n\n    const config = {\n      headers: { Authorization: `Bearer ${user_token}` },\n    };\n\n    const user_id = session.user.user.user_id;\n    const res = await axiosInstance.get(`/users/profile/${user_id}`, config);\n\n    return {\n      props: { user: res.data.data.result, session },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error } };\n  }\n}\n\nexport default Edit;\n","/Users/mac/Documents/Medbox-Client/pages/profile/index.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357"],[],"import { useEffect, useState } from 'react';\nimport { getSession } from 'next-auth/react';\nimport axiosInstance from '../../src/config/api';\nimport '@fontsource/poppins';\nimport Navbar from '../../components/Navbar';\nimport {\n  Text,\n  VStack,\n  Button,\n  Link,\n  Box,\n  Show,\n  HStack,\n  ChakraProvider,\n  Container,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport NextLink from 'next/link';\nimport { api_origin } from '../../constraint';\nimport theme from '../../components/theme';\nimport { LockIcon, AddIcon, EditIcon, DeleteIcon } from '@chakra-ui/icons';\nimport AddAddress from '../../components/AddAddress';\nimport EditAddress from '../../components/EditAddress';\nimport DeleteAddress from '../../components/DeleteAddress';\n\nfunction Profile(props) {\n  const [user, setUser] = useState(props.user);\n  const [addresses, setAddresses] = useState(props.addresses);\n  const [imgSource, setImgSource] = useState(api_origin + props.user.avatar);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [modalEdit, setModalEdit] = useState(false);\n  const [modalDelete, setModalDelete] = useState(false);\n  const [selectedAddressId, setSelectedAddressId] = useState('');\n  const [selectedAddressDetail, setSelectedAddressDetail] = useState('');\n  const [selectedRecipient, setSelectedRecipient] = useState('');\n  const [selectedPostalCode, setSelectedPostalCode] = useState('');\n\n  const toast = useToast();\n\n  const { user_id, name, email, gender, birthDate, phoneNumber } = user;\n\n  useEffect(() => {\n    RenderUserAddresses();\n  }, []);\n\n  useEffect(() => {}, [\n    selectedAddressId,\n    selectedAddressDetail,\n    selectedRecipient,\n    selectedPostalCode,\n  ]);\n\n  const RenderUserAddresses = async () => {\n    try {\n      const session = await getSession();\n\n      if (!session) return { redirect: { destination: '/login' } };\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const addressRes = await axiosInstance.get(\n        `/addresses/useraddresslists`,\n        config,\n      );\n      setAddresses(addressRes.data.data);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  async function onSetDefaultAddress(address_id) {\n    try {\n      const resSetDefaultAddress = await axiosInstance.patch(\n        `/addresses/setdefault/${address_id}`,\n      );\n      toast({\n        description: resSetDefaultAddress.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      RenderUserAddresses();\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  }\n\n  const renderAddresses = () => {\n    return addresses.map((address) => (\n      <Box\n        paddingY={2}\n        paddingLeft={2}\n        border=\"2px\"\n        borderColor=\"gray.300\"\n        borderRadius=\"md\"\n        width={320}\n        key={address.address_id}\n      >\n        {address.isDefault ? (\n          <HStack justifyContent=\"space-between\">\n            <VStack align=\"start\">\n              <Text\n                fontWeight={500}\n                fontSize={{ base: '11', md: '12' }}\n                color=\"red\"\n              >\n                Alamat Utama\n              </Text>\n              <Text\n                fontWeight={500}\n                fontSize={{ base: '12', md: '13' }}\n                color=\"gray.600\"\n              >\n                Penerima: {address.recipient}\n              </Text>\n              <Text\n                fontWeight={500}\n                fontSize={{ base: '12', md: '13' }}\n                color=\"gray.600\"\n              >\n                {address.addressDetail}\n              </Text>\n              <Text\n                fontWeight={500}\n                fontSize={{ base: '12', md: '13' }}\n                color=\"gray.600\"\n              >\n                {address.city_name}, {address.province}, {address.postalCode}\n              </Text>\n            </VStack>\n          </HStack>\n        ) : (\n          <HStack justifyContent=\"space-between\">\n            <VStack align=\"start\">\n              <Text fontWeight={500} fontSize={13} color=\"gray.600\">\n                Penerima: {address.recipient}\n              </Text>\n              <Text fontWeight={500} fontSize={13} color=\"gray.600\">\n                {address.addressDetail}\n              </Text>\n              <Text fontWeight={500} fontSize={13} color=\"gray.600\">\n                {address.city_name}, {address.province}, {address.postalCode}\n              </Text>\n            </VStack>\n            <VStack>\n              <VStack paddingRight=\"4\" paddingBottom=\"1\">\n                <Button\n                  height={4}\n                  width={4}\n                  colorScheme=\"white\"\n                  variant=\"solid\"\n                  size=\"xxs\"\n                  onClick={() => onSetDefaultAddress(address.address_id)}\n                >\n                  <VStack>\n                    <Text fontSize={11} fontWeight=\"500\" color=\"red\">\n                      Set Default\n                    </Text>\n                  </VStack>\n                </Button>\n              </VStack>\n              <HStack paddingRight={4}>\n                <Button\n                  height={4}\n                  width={4}\n                  colorScheme=\"white\"\n                  variant=\"solid\"\n                  size=\"xxs\"\n                  onClick={() => {\n                    setSelectedAddressId(address.address_id);\n                    setSelectedAddressDetail(address.addressDetail);\n                    setSelectedRecipient(address.recipient);\n                    setSelectedPostalCode(address.postalCode);\n                    setModalEdit(true);\n                  }}\n                >\n                  <EditIcon w={3.5} h={3.5} color=\"#004776\" />\n                  <EditAddress\n                    isOpen={modalEdit}\n                    onClose={() => setModalEdit(false)}\n                    address_id={selectedAddressId}\n                    editAddressDetail={selectedAddressDetail}\n                    editRecipient={selectedRecipient}\n                    editPostalCode={selectedPostalCode}\n                    RenderUserAddresses={RenderUserAddresses}\n                  />\n                </Button>\n                <Button\n                  height={4}\n                  width={4}\n                  colorScheme=\"white\"\n                  variant=\"solid\"\n                  size=\"xxs\"\n                  onClick={() => {\n                    setSelectedAddressId(address.address_id);\n                    setModalDelete(true);\n                  }}\n                >\n                  <DeleteIcon w={3.5} h={3.5} color=\"#004776\" />\n                  <DeleteAddress\n                    isOpen={modalDelete}\n                    onClose={() => setModalDelete(false)}\n                    address_id={selectedAddressId}\n                    RenderUserAddresses={RenderUserAddresses}\n                  />\n                </Button>\n              </HStack>\n            </VStack>\n          </HStack>\n        )}\n      </Box>\n    ));\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Show above=\"md\">\n        <Navbar />\n      </Show>\n      <Container>\n        <Box\n          marginTop={{ md: '3' }}\n          marginBottom={{ md: '8' }}\n          boxShadow={{ md: 'xl' }}\n          p={{ md: '12' }}\n          rounded={{ md: 'md' }}\n          bg=\"white\"\n        >\n          <Show below=\"md\">\n            <HStack marginTop={9} marginLeft={4}>\n              <NextLink href=\"/\">\n                <Link>\n                  <Image src=\"/profile/close.png\" width={16} height={16} />\n                </Link>\n              </NextLink>\n              <Text\n                paddingBottom={1}\n                paddingLeft={2}\n                fontSize={16}\n                fontWeight={600}\n                color=\"#49454F\"\n              >\n                Menu Utama\n              </Text>\n            </HStack>\n          </Show>\n          <HStack marginTop={4} marginLeft={{ base: '2', md: '77' }}>\n            <Image\n              unoptimized={true}\n              className=\"rounded-full\"\n              src={imgSource}\n              loader={() => {\n                return imgSource;\n              }}\n              layout={'fixed'}\n              width={70}\n              height={70}\n            />\n            <VStack align=\"left\">\n              <Text\n                fontSize={{ base: '16', md: '17' }}\n                paddingLeft={3}\n                fontWeight={600}\n                color=\"#262626\"\n              >\n                {name}\n              </Text>\n              <Text\n                paddingLeft={3}\n                fontWeight={500}\n                color=\"#878686\"\n                fontSize={{ base: '12', md: '14' }}\n              >\n                {phoneNumber}\n              </Text>\n            </VStack>\n          </HStack>\n          <VStack>\n            <HStack>\n              <NextLink href=\"/profile/edit\">\n                <Link>\n                  <Button\n                    colorScheme=\"messenger\"\n                    width={327}\n                    marginTop={4}\n                    color=\"white\"\n                    fontWeight={{ base: '500', md: '600' }}\n                    fontSize={15}\n                    variant={{ base: 'solid', md: 'outline' }}\n                  >\n                    Ubah Profil\n                  </Button>\n                </Link>\n              </NextLink>\n            </HStack>\n            <Show above=\"md\">\n              <VStack paddingTop={4} align=\"start\">\n                <VStack>\n                  <Image src=\"/profile/line.png\" width={327} height={2} />\n                </VStack>\n                <VStack\n                  align=\"start\"\n                  fontWeight={700}\n                  fontSize={15}\n                  paddingBlock={3}\n                >\n                  <VStack>\n                    <Text>Email</Text>\n                  </VStack>\n                  <VStack paddingBottom={2}>\n                    <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                      {email}\n                    </Text>\n                  </VStack>\n                  <VStack>\n                    <Text>Gender</Text>\n                  </VStack>\n                  <VStack paddingBottom={2}>\n                    <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                      {gender ? gender : 'Belum dipilih'}\n                    </Text>\n                  </VStack>\n                  <VStack>\n                    <Text>Tanggal Lahir</Text>\n                  </VStack>\n                  <VStack>\n                    <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                      {birthDate ? birthDate.slice(0, 10) : 'Belum dipilih'}\n                    </Text>\n                  </VStack>\n                </VStack>\n                <VStack>\n                  <Image src=\"/profile/line.png\" width={327} height={2} />\n                </VStack>\n                <VStack\n                  fontSize={14}\n                  fontWeight={600}\n                  paddingBlock={3}\n                  width=\"full\"\n                >\n                  <Box width={320}>\n                    <VStack align=\"start\" fontWeight={700} fontSize={15}>\n                      <HStack>\n                        <HStack>\n                          <Text>Alamat</Text>\n                        </HStack>\n                        <HStack paddingBottom={0.5}>\n                          <Button\n                            height={4}\n                            width={1}\n                            colorScheme=\"white\"\n                            variant=\"solid\"\n                            size=\"xs\"\n                            onClick={onOpen}\n                          >\n                            <AddIcon w={3} h={3} color=\"#004776\" />\n                            <AddAddress\n                              isOpen={isOpen}\n                              onClose={onClose}\n                              RenderUserAddresses={RenderUserAddresses}\n                            />\n                          </Button>\n                        </HStack>\n                      </HStack>\n                      {addresses.length ? (\n                        <VStack>{renderAddresses()}</VStack>\n                      ) : (\n                        <VStack>\n                          <Text\n                            fontWeight={500}\n                            fontSize={14.5}\n                            color=\"gray.600\"\n                          >\n                            Belum ada alamat\n                          </Text>\n                        </VStack>\n                      )}\n                    </VStack>\n                  </Box>\n                </VStack>\n                <VStack>\n                  <Image src=\"/profile/line.png\" width={327} height={2} />\n                </VStack>\n                <VStack\n                  fontSize={14}\n                  fontWeight={600}\n                  paddingBlock={3}\n                  width=\"full\"\n                >\n                  <Box width=\"full\">\n                    <NextLink href={'/transaction/' + user_id}>\n                      <Link>\n                        <HStack width=\"full\" justifyContent=\"space-between\">\n                          <Text>Riwayat Transaksi</Text>\n                          <Image src=\"/profile/go.png\" width={10} height={10} />\n                        </HStack>\n                      </Link>\n                    </NextLink>\n                  </Box>\n                </VStack>\n              </VStack>\n              <VStack>\n                <VStack>\n                  <Image src=\"/profile/line.png\" width={327} height={1.5} />\n                </VStack>\n                <VStack>\n                  <NextLink href=\"/change-password\">\n                    <Link>\n                      <HStack marginTop={4}>\n                        <LockIcon w={4} h={4} color=\"#004776\" />\n                        <Text fontWeight={600} fontSize={14} paddingLeft={2}>\n                          Ubah Password\n                        </Text>\n                      </HStack>\n                    </Link>\n                  </NextLink>\n                </VStack>\n              </VStack>\n            </Show>\n            <Show below=\"md\">\n              <VStack paddingTop={3}>\n                <Image src=\"/profile/line.png\" width={327} height={2} />\n                <HStack alignSelf=\"start\" paddingTop={1}>\n                  <Text fontWeight={600} fontSize={14}>\n                    Alamat\n                  </Text>\n                  <HStack paddingBottom={0.5}>\n                    <Button\n                      height={4}\n                      width={1}\n                      colorScheme=\"white\"\n                      variant=\"solid\"\n                      size=\"xs\"\n                      onClick={onOpen}\n                    >\n                      <AddIcon w={3} h={3} color=\"#004776\" />\n                      <AddAddress isOpen={isOpen} onClose={onClose} />\n                    </Button>\n                  </HStack>\n                </HStack>\n                <VStack paddingTop={1} alignSelf=\"start\" paddingBottom={5}>\n                  {addresses.length ? (\n                    <VStack>{renderAddresses()}</VStack>\n                  ) : (\n                    <VStack>\n                      <Text fontWeight={500} fontSize={13} color=\"#B7B7B7\">\n                        Belum ada alamat\n                      </Text>\n                    </VStack>\n                  )}\n                </VStack>\n                <Image src=\"/profile/line.png\" width={327} height={1.5} />\n                <VStack alignSelf=\"start\" paddingTop={1}>\n                  <Text fontWeight={600} fontSize={14}>\n                    Aktivitas Saya\n                  </Text>\n                </VStack>\n                <VStack alignSelf=\"start\" paddingTop={1.5}>\n                  <Text fontWeight={500} fontSize={13} color=\"#B7B7B7\">\n                    Belum ada transaksi\n                  </Text>\n                </VStack>\n                <VStack paddingTop={3} paddingBottom={5}>\n                  <Image src=\"/profile/line.png\" width={327} height={2} />\n                </VStack>\n                <VStack alignSelf=\"start\">\n                  <NextLink href=\"/\">\n                    <Link>\n                      <HStack marginBottom={6}>\n                        <Image src=\"/profile/home.png\" width={16} height={16} />\n                        <Text fontWeight={600} fontSize={14} paddingLeft={2}>\n                          Beranda\n                        </Text>\n                      </HStack>\n                    </Link>\n                  </NextLink>\n                </VStack>\n                <VStack alignSelf=\"start\">\n                  <NextLink href=\"/productCatalog/semuaObat=1\">\n                    <Link>\n                      <HStack>\n                        <Image\n                          src=\"/profile/store.png\"\n                          width={14}\n                          height={16}\n                        />\n                        <Text fontWeight={600} fontSize={14} paddingLeft={2.5}>\n                          Toko Obat\n                        </Text>\n                      </HStack>\n                    </Link>\n                  </NextLink>\n                </VStack>\n                <VStack alignSelf=\"start\">\n                  <NextLink href={'/transaction/' + user_id}>\n                    <Link>\n                      <HStack paddingTop={6}>\n                        <Image\n                          src=\"/profile/history.png\"\n                          width={14}\n                          height={16}\n                        />\n                        <Text fontWeight={600} fontSize={14} paddingLeft={2.5}>\n                          Riwayat\n                        </Text>\n                      </HStack>\n                    </Link>\n                  </NextLink>\n                </VStack>\n                <VStack alignSelf=\"start\">\n                  <NextLink href=\"/change-password\">\n                    <Link>\n                      <HStack paddingTop={5} marginBottom={10}>\n                        <LockIcon w={3.5} h={3.5} color=\"#004776\" />\n                        <Text\n                          fontWeight={600}\n                          fontSize={14}\n                          paddingLeft={2.5}\n                          paddingTop={1}\n                        >\n                          Ubah Password\n                        </Text>\n                      </HStack>\n                    </Link>\n                  </NextLink>\n                </VStack>\n              </VStack>\n            </Show>\n          </VStack>\n        </Box>\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    const { user_token } = session.user;\n\n    const config = {\n      headers: { Authorization: `Bearer ${user_token}` },\n    };\n\n    const user_id = session.user.user.user_id;\n    const userRes = await axiosInstance.get(\n      `/users/profile/${user_id}`,\n      config,\n    );\n    const addressRes = await axiosInstance.get(\n      `/addresses/useraddresslists`,\n      config,\n    );\n\n    return {\n      props: {\n        user: userRes.data.data.result,\n        addresses: addressRes.data.data,\n        session,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error } };\n  }\n}\n\nexport default Profile;\n","/Users/mac/Documents/Medbox-Client/pages/register.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/resetPassword/[token].js",[],[],"/Users/mac/Documents/Medbox-Client/pages/transaction/[user_id].js",["358","359"],[],"import {\n  Text,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Tab,\n  VStack,\n  Image,\n  HStack,\n  Button,\n  useToast,\n} from '@chakra-ui/react';\nimport { getSession } from 'next-auth/react';\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport TransactionCards from '../../components/TransactionCards';\nimport axiosInstance from '../../src/config/api';\n\nfunction Transaction(props) {\n  const { user_id } = props;\n  const [transac, setTransac] = useState([]);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(3);\n  const [selected, setSelected] = useState(0);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [selected, page]);\n\n  const onPrevClick = () => {\n    setPage(page - 1);\n  };\n\n  const onNextClick = () => {\n    setPage(page + 1);\n  };\n\n  const fetchTransactions = async () => {\n    try {\n      const session = await getSession();\n      const { user_id } = session.user.user;\n      const { user_token } = session.user;\n\n      const config = {\n        params: { page, pageSize },\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n      const res = await axiosInstance.get(\n        `/transactions/getTransactionsByIndex/${user_id}/${selected}`,\n        config,\n      );\n      setTransac(res.data.data.resFetchTransactions);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  function mappedTransactions() {\n    return transac?.map((transaction, index) => {\n      return (\n        <TransactionCards\n          key={transaction.transaction_id}\n          // transactions={transac.transactions}\n          productName={transaction.transaction_details[0].product.productName}\n          productImage={transaction.transaction_details[0].product.productImage}\n          status={transaction.status}\n          totalPrice={transaction.totalPrice}\n          trans_id={transaction.transaction_id}\n          // quantity={transaction.transaction_details.product.quantity}\n          // fetchTransactions={fetchTransactions}\n          props={props}\n        />\n      );\n    });\n  }\n\n  return (\n    <div className=\"h-[100vh] w-[100vw]\">\n      <div>\n        <Navbar />\n      </div>\n      <Text fontSize={30} fontWeight={'semibold'} my={8} ml={20}>\n        Riwayat Pemesanan\n      </Text>\n      {props.session.user.user.isVerified ? (\n        <Tabs\n          onChange={(index) => {\n            setSelected(index), setPage(1);\n          }}\n          mx={100}\n          variant={'soft-rounded'}\n          colorScheme={'facebook'}\n          border=\"1px\"\n          borderColor=\"gray.200\"\n          rounded={10}\n          padding={6}\n          marginBottom={10}\n        >\n          <TabList>\n            <Tab>Semua</Tab>\n            <Tab>Diproses</Tab>\n            <Tab>Sedang Dikirim</Tab>\n            <Tab>Berhasil</Tab>\n            <Tab>Tidak Berhasil</Tab>\n            <Tab>Menunggu Pembayaran</Tab>\n            <Tab>Menunggu Konfirmasi Pembayaran</Tab>\n          </TabList>\n          {transac.length ? (\n            <TabPanels>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n              <TabPanel>\n                <div>{mappedTransactions()}</div>\n              </TabPanel>\n            </TabPanels>\n          ) : (\n            <VStack marginTop={105}>\n              <Image\n                src=\"/admin/Empty-Transaction.png\"\n                width={250}\n                height={250}\n              />\n              <Text paddingTop={6} fontSize={18}>\n                Tidak Ada Transaksi\n              </Text>\n            </VStack>\n          )}\n          {transac.length ? (\n            <HStack paddingLeft={210} paddingBottom={30}>\n              <Button\n                variant={'outline'}\n                marginRight={2}\n                onClick={onPrevClick}\n                isDisabled={page == 1}\n                colorScheme=\"messenger\"\n              >\n                Prev\n              </Button>\n              <Text paddingRight={2}>{page}</Text>\n              <Button\n                variant={'outline'}\n                onClick={onNextClick}\n                isDisabled={page >= transac.length}\n                colorScheme=\"messenger\"\n              >\n                Next\n              </Button>\n            </HStack>\n          ) : (\n            <VStack></VStack>\n          )}\n        </Tabs>\n      ) : (\n        <div className=\"w-[100%] h-[50%] flex items-center justify-center\">\n          <p className=\"text-[1.5rem]\">Unverified Account</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    const { user_token } = session.user;\n    const { user_id } = context.params;\n\n    return {\n      props: {\n        session,\n        user_id,\n        user_token,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error } };\n  }\n}\n\nexport default Transaction;\n","/Users/mac/Documents/Medbox-Client/pages/transaction/index.js",[],[],"/Users/mac/Documents/Medbox-Client/pages/transactionDetail/[transaction_id].js",[],[],"/Users/mac/Documents/Medbox-Client/pages/upload-prescription-image/index.js",["360","361","362","363","364","365","366","367","368"],[],"import { useState, useEffect } from 'react';\nimport { getSession } from 'next-auth/react';\nimport axiosInstance from '../../src/config/api';\nimport '@fontsource/poppins';\nimport Navbar from '../../components/Navbar';\nimport {\n  Text,\n  VStack,\n  Button,\n  Link,\n  HStack,\n  ChakraProvider,\n  Box,\n  useToast,\n  useDisclosure,\n  Checkbox,\n} from '@chakra-ui/react';\nimport NextLink from 'next/link';\nimport Image from 'next/image';\nimport { api_origin } from '../../constraint';\nimport theme from '../../components/theme';\nimport { useRouter } from 'next/router';\nimport { AddIcon } from '@chakra-ui/icons';\nimport AddAddress from '../../components/AddAddress';\nimport GetDeliveryCost from '../../components/GetDeliveryCost';\nimport SelectAddress from '../../components/SelectAddress';\n\nfunction UploadPrescriptionImage(props) {\n  const router = useRouter();\n  const [prescriptionImage, setPrescriptionImage] = useState({});\n  const [prescription, setPrescription] = useState(props.prescription);\n  const [userAllAddress, setUserAllAddress] = useState(props.userAllAddress);\n  const [selectAddress, setSelectAddress] = useState(props.defaultAddress);\n  const [selectedCourier, setSelectedCourier] = useState();\n  const [selectedDeliveryCost, setSelectedDeliveryCost] = useState();\n  const [modalSelectAddress, setModalSelectAddress] = useState(false);\n  const [modalSelectCourier, setModalSelectCourier] = useState(false);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [prescriptionPost, setPrescriptionPost] = useState({\n    prescriptionImage: '',\n  });\n  const [imageName, setImageName] = useState('');\n  const [imgSource, setimgSource] = useState(\n    api_origin + `/public/prescriptionImage/default-prescription-image.png`,\n  );\n\n  const toast = useToast();\n\n  useEffect(() => {\n    RenderUserAddresses();\n  }, []);\n\n  const chooseAddress = (newAddress) => {\n    setSelectAddress(newAddress);\n  };\n\n  const RenderUserAddresses = async () => {\n    try {\n      const session = await getSession();\n\n      if (!session) return { redirect: { destination: '/login' } };\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const defaultAddress = await axiosInstance.get(\n        `/addresses/userdefaultaddress`,\n        config,\n      );\n      setSelectAddress(defaultAddress.data.data);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const onFileChange = (event) => {\n    setPrescriptionImage(event.target.files[0]);\n    setimgSource(URL.createObjectURL(event.target.files[0]));\n    setImageName(event.target.files[0].name);\n  };\n\n  const renderCourier = () => {\n    const getCourier = selectedDeliveryCost.split(',');\n    const getSelectedCourier = `${selectedCourier.toUpperCase()}`;\n\n    return <Text>{getSelectedCourier}</Text>;\n  };\n\n  const renderDeliveryCost = () => {\n    const deliveryCost = selectedDeliveryCost.split(',');\n    const getDeliveryCost = parseInt(deliveryCost[1]).toLocaleString('id');\n    return (\n      <HStack\n        fontWeight={500}\n        fontSize={15}\n        justify=\"space-between\"\n        minWidth={380}\n      >\n        <HStack color=\"gray.600\">\n          <Text>Biaya Pengiriman :</Text>;\n          <Text>{selectedDeliveryCost && renderCourier()}</Text>;\n        </HStack>\n        <HStack fontWeight={600}>\n          <Text>Rp {getDeliveryCost}</Text>\n        </HStack>\n      </HStack>\n    );\n  };\n\n  const createPrescripTransaction = async () => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const deliveryCost = selectedDeliveryCost.split(',');\n      const getDeliveryCost = parseInt(deliveryCost[1]);\n      const body = new FormData();\n      const body2 = {\n        address_id: selectAddress.address_id,\n        courier: selectedCourier,\n        deliveryCost: getDeliveryCost,\n        imageName,\n      };\n\n      body.append('prescriptionImage', prescriptionImage);\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const resCreateTransaction = await axiosInstance.post(\n        '/transactions/uploadPrescriptionImage',\n        body2,\n        config,\n      );\n\n      const imageNameInserted =\n        resCreateTransaction.data.data.prescriptionImageName;\n\n      const resPostPrescriptionImage = await axiosInstance.post(\n        `/transactions/createPrescriptionTransaction/${imageNameInserted}`,\n        body,\n        config,\n      );\n\n      toast({\n        description: resCreateTransaction.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      setTimeout(() => {\n        router.replace('/');\n      }, 1000);\n    } catch (error) {\n      console.log({ Error });\n      toast({\n        description: 'Resep Dokter, Alamat, dan Kurir Tidak Boleh Kosong',\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Navbar />\n      {!prescription.resFetchTransactions[0] ? (\n        <HStack>\n          <Box\n            width=\"120vH\"\n            boxShadow=\"md\"\n            marginTop={4}\n            marginLeft={101}\n            marginRight={2}\n            rounded=\"md\"\n            padding={6}\n          >\n            <VStack>\n              <HStack marginBottom={2} fontSize=\"15\" alignSelf=\"start\">\n                <NextLink href=\"/\">\n                  <Link>\n                    <Text color=\"#B7B7B7\" paddingRight={3}>\n                      Beranda\n                    </Text>\n                  </Link>\n                </NextLink>\n                <Image\n                  src=\"/uploadPrescriptionImage/next.png\"\n                  width={5}\n                  height={9}\n                />\n                <Text color=\"#008DEB\" paddingLeft={0.5}>\n                  Unggah Resep\n                </Text>\n              </HStack>\n              <Text alignSelf=\"start\" fontSize=\"17\" fontWeight=\"600\">\n                Unggah Resep Dokter\n              </Text>\n              <VStack>\n                <Image\n                  src={imgSource}\n                  loader={() => {\n                    return imgSource;\n                  }}\n                  layout={'fixed'}\n                  width={235}\n                  height={235}\n                />\n                <VStack paddingLeft=\"89\" paddingTop={1} fontSize={12.5} pb={1}>\n                  <input type={'file'} onChange={onFileChange} />\n                </VStack>\n                <VStack>\n                  <Text fontSize=\"16\" fontWeight=\"500\" marginTop={3}>\n                    Cara Unggah Resep Dokter\n                  </Text>\n                </VStack>\n                <HStack paddingTop={2}>\n                  <VStack\n                    width={220}\n                    fontSize={12}\n                    textAlign=\"center\"\n                    paddingRight={10}\n                  >\n                    <Image\n                      src=\"/uploadPrescriptionImage/upload-prescription.png\"\n                      width={60}\n                      height={60}\n                    />\n                    <VStack paddingTop={2}>\n                      <Text fontWeight={600}>1. Unggah Resep</Text>\n                      <Text>\n                        Foto resep yang ditulis oleh dokter anda, kemudian\n                        unggah pada form di atas.\n                      </Text>\n                    </VStack>\n                  </VStack>\n                  <VStack\n                    width={180}\n                    fontSize={12}\n                    textAlign=\"center\"\n                    paddingTop={1.5}\n                    paddingRight={5}\n                  >\n                    <Image\n                      src=\"/uploadPrescriptionImage/waiting-for-validation.png\"\n                      width={52}\n                      height={48}\n                    />\n                    <VStack paddingTop={3}>\n                      <Text fontWeight={600}>2. Menunggu Validasi</Text>\n                    </VStack>\n                    <Text>\n                      Tim kami akan mengecek ketersediaan obat sesuai resep.\n                    </Text>\n                  </VStack>\n                  <VStack\n                    width={220}\n                    fontSize={12}\n                    textAlign=\"center\"\n                    paddingLeft={5}\n                  >\n                    <Image\n                      src=\"/uploadPrescriptionImage/delivery.png\"\n                      width={60}\n                      height={60}\n                    />\n                    <VStack paddingTop={2}>\n                      <Text fontWeight={600}>3. Lakukan Pembayaran</Text>\n                      <Text>\n                        Segera lakukan pembayaran agar kami dapat memproses obat\n                        anda.\n                      </Text>\n                    </VStack>\n                  </VStack>\n                  <VStack\n                    width={180}\n                    fontSize={12}\n                    textAlign=\"center\"\n                    paddingLeft={8}\n                  >\n                    <Image\n                      src=\"/uploadPrescriptionImage/payment.png\"\n                      width={64}\n                      height={64}\n                    />\n                    <VStack>\n                      <Text fontWeight={600}>4. Obat Diantar</Text>\n                      <Text>\n                        Kami akan segera mengirimkan obat yang anda pesan.\n                      </Text>\n                    </VStack>\n                  </VStack>\n                </HStack>\n              </VStack>\n            </VStack>\n          </Box>\n          <VStack alignSelf=\"start\">\n            <Box\n              width=\"60vH\"\n              boxShadow=\"md\"\n              marginTop={4}\n              rounded=\"md\"\n              padding={6}\n            >\n              <Text fontWeight={600}>Alamat Pengiriman</Text>\n              {selectAddress ? (\n                <VStack align=\"start\" marginTop={5}>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    Penerima: {selectAddress.recipient}\n                  </Text>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    {selectAddress.addressDetail}\n                  </Text>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    {selectAddress.city_name}, {selectAddress.province},{' '}\n                    {selectAddress.postalCode}\n                  </Text>\n                  {userAllAddress ? (\n                    <VStack>\n                      <Button\n                        marginTop={3}\n                        bgColor=\"white\"\n                        _hover=\"white\"\n                        size=\"xxl\"\n                        variant=\"solid\"\n                        color=\"#1068A3\"\n                        fontSize={13}\n                        onClick={() => setModalSelectAddress(true)}\n                      >\n                        Pilih alamat lain\n                        <SelectAddress\n                          isOpen={modalSelectAddress}\n                          onClose={() => setModalSelectAddress(false)}\n                          userAllAddress={userAllAddress}\n                          chooseAddress={chooseAddress}\n                          RenderUserAddresses={RenderUserAddresses}\n                        />\n                      </Button>\n                    </VStack>\n                  ) : null}\n                </VStack>\n              ) : (\n                <VStack align=\"start\" marginTop={5}>\n                  <Text fontWeight={500} fontSize={15} color=\"gray.600\">\n                    Belum ada alamat\n                  </Text>\n                  <VStack align=\"start\" paddingTop={3}>\n                    <Button\n                      bgColor=\"white\"\n                      _hover=\"white\"\n                      size=\"xxl\"\n                      variant=\"solid\"\n                      color=\"#1068A3\"\n                      fontSize={13}\n                      onClick={onOpen}\n                    >\n                      <AddIcon w={2.5} h={2.5} color=\"#004776\" />\n                      <Text paddingLeft={1.5} paddingTop={0.3}>\n                        Tambahkan Alamat Baru\n                      </Text>\n                      <AddAddress\n                        isOpen={isOpen}\n                        onClose={onClose}\n                        RenderUserAddresses={RenderUserAddresses}\n                      />\n                    </Button>\n                  </VStack>\n                </VStack>\n              )}\n            </Box>\n            <Box width=\"60vH\" boxShadow=\"md\" rounded=\"md\" padding={6}>\n              <Text fontWeight={600}>Metode Pengiriman</Text>\n              <HStack marginY={6}>\n                <Button\n                  bgColor=\"white\"\n                  _hover=\"white\"\n                  size=\"xxl\"\n                  variant=\"solid\"\n                  color=\"#1068A3\"\n                  fontSize={13}\n                  onClick={() => setModalSelectCourier(true)}\n                >\n                  <Text paddingTop={0.3}>Pilih Metode Pengiriman</Text>\n                  <GetDeliveryCost\n                    isOpen={modalSelectCourier}\n                    onClose={() => setModalSelectCourier(false)}\n                    destination={selectAddress?.city_id}\n                    setSelectedDeliveryCost={setSelectedDeliveryCost}\n                    setSelectedCourier={setSelectedCourier}\n                  />\n                </Button>\n              </HStack>\n              <Text fontWeight={600}>Ringkasan Pembayaran</Text>\n              <HStack\n                justifyContent=\"space-between\"\n                marginTop={4}\n                marginBottom={2}\n              >\n                <HStack>\n                  <Text>{selectedDeliveryCost && renderDeliveryCost()}</Text>\n                </HStack>\n              </HStack>\n              <Image src=\"/profile/line.png\" width={400} height={1.5} />\n\n              <VStack align=\"start\" marginTop=\"5\">\n                <Text fontWeight={600} fontSize={15}>\n                  Metode Pembayaran\n                </Text>\n              </VStack>\n              <VStack align=\"start\" marginTop=\"2\">\n                <Checkbox fontWeight={500} color=\"gray.600\" size=\"sm\">\n                  Transfer Bank BCA\n                </Checkbox>\n              </VStack>\n              <VStack marginTop={8}>\n                <Button\n                  fontSize={13}\n                  color=\"white\"\n                  colorScheme=\"messenger\"\n                  fontWeight={500}\n                  width={250}\n                  onClick={createPrescripTransaction}\n                >\n                  Lanjutkan Pembayaran\n                </Button>\n              </VStack>\n            </Box>\n          </VStack>\n        </HStack>\n      ) : (\n        <VStack marginTop=\"17vH\">\n          <Image\n            src=\"/uploadPrescriptionImage/validation.png\"\n            width={250}\n            height={250}\n          />\n          <VStack>\n            <Text marginTop={4} fontSize={17} fontWeight={500}>\n              Resep sedang divalidasi.\n            </Text>\n            <Text paddingTop={2} fontSize={17} fontWeight={500}>\n              Resep yang berhasil divalidasi akan masuk ke riwayat pesanan.\n            </Text>\n          </VStack>\n        </VStack>\n      )}\n    </ChakraProvider>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  try {\n    const session = await getSession({ req: context.req });\n\n    if (!session) return { redirect: { destination: '/login' } };\n\n    const { user_token } = session.user;\n\n    const config = {\n      headers: { Authorization: `Bearer ${user_token}` },\n    };\n\n    const user_id = session.user.user.user_id;\n\n    const userAllAddress = await axiosInstance.get(\n      `/addresses/useraddresslists`,\n      config,\n    );\n    const defaultAddress = await axiosInstance.get(\n      `/addresses/userdefaultaddress`,\n      config,\n    );\n    const prescription = await axiosInstance.get(\n      `/transactions/userPrescription`,\n      config,\n    );\n\n    return {\n      props: {\n        user_id,\n        user_token,\n        userAllAddress: userAllAddress.data.data,\n        defaultAddress: defaultAddress.data.data,\n        prescription: prescription.data.data,\n        session,\n      },\n    };\n  } catch (error) {\n    console.log({ error });\n    return { props: { error } };\n  }\n}\n\nexport default UploadPrescriptionImage;\n","/Users/mac/Documents/Medbox-Client/components/AddAddress/index.js",["369"],[],"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Input,\n  Select,\n  Text,\n  VStack,\n  useToast,\n} from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { getSession } from 'next-auth/react';\nimport axiosInstance from '../../src/config/api';\n\nfunction AddAddress(props) {\n  const { isOpen, onClose, RenderUserAddresses } = props;\n  const [userAddress, setUserAddress] = useState({});\n  const [getProvince, setGetProvince] = useState([]);\n  const [getCity, setGetCity] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n\n  const splitProvince = selectedProvince.split(',');\n  const province_id = splitProvince[0];\n  const province = splitProvince[1];\n\n  const splitCity = selectedCity.split(',');\n  const city_id = splitCity[0];\n  const city_name = splitCity[1];\n\n  const { recipient, addressDetail, postalCode } = userAddress;\n\n  const toast = useToast();\n\n  useEffect(() => {\n    fetchProvince();\n  });\n\n  useEffect(() => {\n    if (selectedProvince) {\n      fetchCity();\n    }\n  }, [selectedProvince]);\n\n  const onAddAddress = async () => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const body = {\n        recipient,\n        province_id,\n        province,\n        city_id,\n        city_name,\n        addressDetail,\n        postalCode,\n      };\n\n      const res = await axiosInstance.post('/addresses/add', body, config);\n\n      toast({\n        description: res.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      RenderUserAddresses();\n    } catch (error) {\n      console.log({ error });\n      toast({\n        description: 'Semua Field Harus Terisi',\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const onHandleChange = (e) => {\n    setUserAddress({ ...userAddress, [e.target.name]: e.target.value });\n  };\n\n  const onHandleChangeProvince = (e) => {\n    setSelectedProvince(e.target.value);\n  };\n\n  const onHandleChangeCity = (e) => {\n    setSelectedCity(e.target.value);\n  };\n\n  const renderProvince = () => {\n    return getProvince.map((province) => (\n      <option\n        key={province}\n        value={`${province.province_id},${province.province}`}\n      >\n        {province.province}\n      </option>\n    ));\n  };\n\n  const renderCity = () => {\n    return getCity.map((city) => (\n      <option key={city} value={`${city.city_id},${city.city_name}`}>\n        {city.city_name}\n      </option>\n    ));\n  };\n\n  const fetchProvince = async () => {\n    try {\n      const resGetProvince = await axiosInstance.get('/rajaongkir/provinsi');\n      setGetProvince(resGetProvince.data.rajaongkir.results);\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  const fetchCity = async () => {\n    try {\n      const resGetCity = await axiosInstance.get(\n        `/rajaongkir/kota/${selectedProvince}`,\n      );\n      setGetCity(resGetCity.data.rajaongkir.results);\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent\n        backgroundColor=\"white\"\n        padding={{ md: '4' }}\n        paddingY={{ base: '3' }}\n        marginX={{ base: '4' }}\n      >\n        <ModalHeader fontWeight={600} fontSize={{ base: '16', md: '19' }}>\n          Tambah Alamat\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack\n            align=\"start\"\n            fontSize={{ base: '14', md: '15' }}\n            fontWeight={500}\n          >\n            <Text paddingTop={2}>Penerima</Text>\n            <Input\n              _focusVisible\n              name=\"recipient\"\n              type=\"text\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={recipient}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n            <Text>Provinsi</Text>\n            <Select\n              _focusVisible\n              name=\"province_id\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              placeholder=\"Pilih Provinsi\"\n              variant=\"filled\"\n              onChange={onHandleChangeProvince}\n            >\n              {renderProvince()}\n            </Select>\n            <Text paddingTop={2}>Kota</Text>\n            {getCity && (\n              <Select\n                _focusVisible\n                name=\"city_id\"\n                fontSize={{ base: '13', md: '14' }}\n                fontWeight={400}\n                placeholder=\"Pilih Kota\"\n                variant=\"filled\"\n                onChange={onHandleChangeCity}\n                mb={3}\n              >\n                {renderCity()}\n              </Select>\n            )}\n            <Text paddingTop={2}>Detail Alamat</Text>\n            <Input\n              _focusVisible\n              name=\"addressDetail\"\n              type=\"text\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={addressDetail}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n            <Text paddingTop={2}>Kode Pos</Text>\n            <Input\n              _focusVisible\n              name=\"postalCode\"\n              type=\"number\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={postalCode}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            height={9}\n            fontSize={15}\n            fontWeight={500}\n            colorScheme=\"messenger\"\n            onClick={() => {\n              onAddAddress(userAddress), onClose();\n            }}\n          >\n            Simpan\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default AddAddress;\n","/Users/mac/Documents/Medbox-Client/components/AddCategoryModal/index.js",["370","371"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport axiosInstance from '../../src/config/api';\n\nfunction AddCategoryModal({ addCategoryButton, setAddCategoryButton }) {\n  const [category, setCategory] = useState({ category: '', categoryImage: '' });\n  const [categoryImage, setCategoryImage] = useState();\n  const [newProductImage, setNewProductImage] = useState(\n    '/admin/TambahProduk.svg',\n  );\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    if (addCategoryButton) {\n      onOpen();\n    } else if (!addCategoryButton) {\n      onClose();\n    }\n    setCategory({ ...category });\n  }, [addCategoryButton, loading]);\n\n  const handleChange = (prop) => (event) => {\n    setCategory({ ...category, [prop]: event.target.value });\n  };\n\n  function handleImageChange(event) {\n    setNewProductImage(URL.createObjectURL(event.target.files[0]));\n    setCategory({\n      ...category,\n      categoryImage: event.target.files[0].name,\n    });\n    setCategoryImage(event.target.files[0]);\n  }\n\n  const saveCategoryButtonClick = async () => {\n    try {\n      setLoading(true);\n      if (Object.values(category).includes('')) {\n        toast({\n          description: 'Tolong Isi Semua',\n          position: 'top',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n      const body = new FormData();\n\n      body.append('categoriesImage', categoryImage);\n\n      //   const config = {\n      //     headers: { 'Content-Type': 'multipart/form-data' },\n      //   };\n\n      const resAddCategory = await axiosInstance.post(\n        '/categoriesLists',\n        category,\n      );\n      const extName = category.categoryImage.split('.');\n\n      const resAddCategoryImage = await axiosInstance.post(\n        `/categoriesLists/upload/${resAddCategory.data.data.newCategories.category_lists_id}.${extName[1]}`,\n        body,\n      );\n      toast({\n        description: resAddCategory.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      setLoading(false);\n      setAddCategoryButton(false);\n    } catch (error) {\n      console.log({ error });\n      setAddCategoryButton(false);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        setAddCategoryButton(false);\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Tambah Category</ModalHeader>\n        <ModalBody>\n          <p>Foto</p>\n          <div className=\"w-[35%] my-[.5vh] hover:cursor-pointer\">\n            <label\n              className=\"hover:cursor-pointer\"\n              htmlFor=\"categoryImageInput\"\n            >\n              <Image\n                unoptimized\n                src={newProductImage}\n                style={{ borderRadius: '.3vw' }}\n                width={1}\n                height={1}\n                layout=\"responsive\"\n              />\n            </label>\n          </div>\n          <input\n            onChange={handleImageChange}\n            className=\"hidden\"\n            id=\"categoryImageInput\"\n            type=\"file\"\n          />\n          <Input\n            value={category.category}\n            onChange={handleChange('category')}\n            placeholder=\"Category\"\n            size=\"lg\"\n            height=\"11vh\"\n            resize=\"none\"\n          />\n        </ModalBody>\n        <ModalFooter justifyContent=\"space-between\">\n          <div className=\"flex w-[50%] justify-end\">\n            <Button\n              style={{ width: '40%', marginRight: '.3vw' }}\n              colorScheme=\"linkedin\"\n              onClick={() => {\n                saveCategoryButtonClick();\n              }}\n            >\n              Simpan\n            </Button>\n            <Button\n              style={{ width: '40%' }}\n              onClick={() => {\n                setAddCategoryButton(false);\n                setCategory({\n                  category: '',\n                });\n              }}\n              variant=\"ghost\"\n            >\n              Batal\n            </Button>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default AddCategoryModal;\n","/Users/mac/Documents/Medbox-Client/components/AddFormulaModal/index.js",["372"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n  ModalCloseButton,\n  Text,\n  HStack,\n  Flex,\n  VStack,\n  Box,\n} from '@chakra-ui/react';\nimport axiosInstance from '../../src/config/api';\nimport { useRouter } from 'next/router';\nimport { useToast } from '@chakra-ui/react';\n\nfunction AddFormulaModal({\n  addFormulaButton,\n  setAddFormulaButton,\n  allProducts,\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [quantity, setQuantity] = useState(0);\n  const [option, setOption] = useState();\n  const [id, setId] = useState();\n  const [tempFormula, setTempFormula] = useState([]);\n  const [deleted, setDeleted] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [disabled, setDisabled] = useState(false);\n  const [amount, setAmount] = useState(0);\n  const toast = useToast();\n\n  useEffect(() => {\n    checkSameProduct();\n    if (addFormulaButton) {\n      onOpen();\n    } else if (!addFormulaButton) {\n      onClose();\n    }\n  }, [addFormulaButton, quantity, tempFormula, option]);\n\n  const onHandleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const onHandleOptionChange = (e) => {\n    setOption(e.target.value);\n  };\n\n  const onHandleQuantityChange = (e) => {\n    setQuantity(e.target.value);\n  };\n  const onHandleAmountChange = (e) => {\n    setAmount(e.target.value);\n  };\n\n  function checkSameProduct() {\n    tempFormula.forEach((product) => {\n      if (option == product.productName) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    });\n  }\n\n  const onAddClick = () => {\n    {\n      setTempFormula([\n        ...tempFormula,\n        {\n          productName: option,\n          quantity,\n        },\n      ]),\n        setQuantity(0),\n        setOption('');\n    }\n  };\n\n  async function onSaveClick() {\n    try {\n      setLoading(true);\n      const body = { productName: name, formula: tempFormula, amount: amount };\n      const res = await axiosInstance.post('/products/concoction', body);\n      if (res) {\n        toast({\n          title: 'Concoction Created!',\n          description: res.data.message,\n          position: 'top',\n          status: 'success',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        setAddFormulaButton(false);\n        setTempFormula([]), setQuantity(0);\n        setDeleted(0), setName(''), setAmount(0);\n      }\n    } catch (error) {\n      toast({\n        title: 'Create Concoction Failed!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      console.log({ Error: error.response.data });\n      setLoading(false);\n      setAddFormulaButton(false);\n      setTempFormula([]), setQuantity(0);\n      setDeleted(0), setName(''), setAmount(0);\n    }\n  }\n\n  function tempFormulaMap() {\n    return tempFormula.map((tempForm, index) => {\n      return (\n        <>\n          <HStack\n            spacing={2}\n            bg={'gray.100'}\n            border=\"1px\"\n            borderColor=\"gray.100\"\n            my={1}\n            mx={6}\n            rounded={6}\n          >\n            <Text ml={10} mr={2} my={2} fontSize=\"md\" fontWeight={'semibold'}>\n              {tempForm.productName}\n            </Text>\n            <Text fontSize=\"s\">x{tempForm.quantity}</Text>\n            <Button\n              variant={'ghost'}\n              colorScheme={'red'}\n              isLoading={loading}\n              onClick={() => {\n                let tempArray = tempFormula;\n                tempArray.splice(index, 1);\n                setTempFormula(tempArray);\n                setDeleted(deleted + 1);\n              }}\n            >\n              x\n            </Button>\n          </HStack>\n        </>\n      );\n    });\n  }\n\n  function productNameMap() {\n    return allProducts?.map((product) => {\n      if (!product.formula) {\n        return (\n          <option key={product.product_id} value={`${product.productName}`}>\n            {product.productName}\n          </option>\n        );\n      }\n    });\n  }\n  {\n    return (\n      <Modal\n        isOpen={isOpen}\n        onClose={() => {\n          setAddFormulaButton(false), setTempFormula([]), setQuantity(0);\n          setDeleted(0), setName(''), setAmount(0);\n        }}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Tambah Obat Racikan</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Input\n              mb={2}\n              type={'text'}\n              placeholder=\"Nama Obat\"\n              onChange={onHandleNameChange}\n            ></Input>\n            <HStack my={3}>\n              <Text>Jumlah Racikan:</Text>\n              {amount == 0 ? (\n                <Button\n                  colorScheme={'linkedin'}\n                  variant={'ghost'}\n                  isDisabled\n                  onClick={() => {\n                    setAmount(amount - 1);\n                  }}\n                >\n                  -\n                </Button>\n              ) : (\n                <Button\n                  colorScheme={'linkedin'}\n                  variant={'ghost'}\n                  onClick={() => {\n                    setAmount(amount - 1);\n                  }}\n                >\n                  -\n                </Button>\n              )}\n\n              <Input\n                placeholder=\"Jumlah Racikan\"\n                type={'text'}\n                width={'70px'}\n                value={amount}\n                onChange={onHandleAmountChange}\n              ></Input>\n              <Button\n                colorScheme={'linkedin'}\n                variant={'ghost'}\n                onClick={() => {\n                  setAmount(amount + 1);\n                }}\n              >\n                +\n              </Button>\n            </HStack>\n            <HStack>\n              <Select\n                name=\"productName\"\n                placeholder=\"Pilih Obat\"\n                onChange={onHandleOptionChange}\n              >\n                {productNameMap()}\n              </Select>\n              {quantity == 0 ? (\n                <Button\n                  colorScheme={'linkedin'}\n                  variant={'ghost'}\n                  isDisabled\n                  onClick={() => {\n                    setQuantity(quantity - 1);\n                  }}\n                >\n                  -\n                </Button>\n              ) : (\n                <Button\n                  colorScheme={'linkedin'}\n                  variant={'ghost'}\n                  onClick={() => {\n                    setQuantity(quantity - 1);\n                  }}\n                >\n                  -\n                </Button>\n              )}\n\n              <Input\n                type={'text'}\n                width={'70px'}\n                value={quantity}\n                onChange={onHandleQuantityChange}\n              ></Input>\n              <Button\n                colorScheme={'linkedin'}\n                variant={'ghost'}\n                onClick={() => {\n                  setQuantity(quantity + 1);\n                }}\n              >\n                +\n              </Button>\n            </HStack>\n          </ModalBody>\n\n          <Box rounded={10} border=\"1px\" borderColor=\"gray.100\" py={2}>\n            <VStack>\n              {tempFormulaMap()}\n              {tempFormula.length ? (\n                <Button\n                  height={'20px'}\n                  width={'110px'}\n                  variant={'ghost'}\n                  fontSize={'small'}\n                  fontWeight={'normal'}\n                  colorScheme={'red'}\n                  isLoading={loading}\n                  onClick={() => {\n                    setTempFormula([]);\n                  }}\n                >\n                  Hapus Semua\n                </Button>\n              ) : (\n                <></>\n              )}\n            </VStack>\n          </Box>\n\n          <ModalFooter>\n            <Button\n              variant=\"ghost\"\n              colorScheme=\"red\"\n              mr={3}\n              onClick={() => {\n                setAddFormulaButton(false), setTempFormula([]), setQuantity(0);\n                setDeleted(0), setName(''), setAmount(0);\n              }}\n            >\n              Batal\n            </Button>\n            {quantity == 0 || option == '' ? (\n              <Button\n                mr={2}\n                isDisabled\n                colorScheme=\"linkedin\"\n                variant=\"outline\"\n                onClick={() => {\n                  setTempFormula([\n                    ...tempFormula,\n                    {\n                      productName: option,\n                      quantity,\n                    },\n                  ]);\n                }}\n              >\n                Tambah\n              </Button>\n            ) : (\n              <Button\n                mr={2}\n                colorScheme=\"linkedin\"\n                variant=\"outline\"\n                isDisabled={disabled}\n                onClick={onAddClick}\n              >\n                Tambah\n              </Button>\n            )}\n            {name && tempFormula.length && amount > 0 ? (\n              <Button\n                colorScheme=\"teal\"\n                variant=\"outline\"\n                isLoading={loading}\n                onClick={onSaveClick}\n              >\n                Simpan\n              </Button>\n            ) : (\n              <Button\n                colorScheme=\"teal\"\n                variant=\"outline\"\n                isLoading={loading}\n                isDisabled\n                onClick={() => {}}\n              >\n                Simpan\n              </Button>\n            )}\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    );\n  }\n}\nexport default AddFormulaModal;\n","/Users/mac/Documents/Medbox-Client/components/AddProductModal/index.js",["373","374"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport axiosInstance from '../../src/config/api';\nimport { useRouter } from 'next/router';\n\nfunction AddProductModal({\n  addProductButton,\n  setAddProductButton,\n  categoriesLists,\n}) {\n  const [productStock, setProductStock] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [productImageFile, setProductImageFile] = useState();\n  const [newProductImage, setNewProductImage] = useState(\n    '/admin/TambahProduk.svg',\n  );\n  const [productInputs, setProductInputs] = useState({\n    categoryInfo: '',\n    description: '',\n    packageType: '',\n    productImage: '',\n    productName: '',\n    productPrice: '',\n    productStock: '',\n    defaultQuantity: '',\n    servingType: '',\n  });\n  const router = useRouter();\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    if (addProductButton) {\n      onOpen();\n    } else if (!addProductButton) {\n      onClose();\n    }\n\n    setProductInputs({ ...productInputs, productStock });\n  }, [addProductButton, loading, productStock]);\n\n  const handleChange = (prop) => (event) => {\n    setProductInputs({ ...productInputs, [prop]: event.target.value });\n  };\n\n  function handleImageChange(event) {\n    setNewProductImage(URL.createObjectURL(event.target.files[0]));\n    setProductInputs({\n      ...productInputs,\n      productImage: event.target.files[0].name,\n    });\n    setProductImageFile(event.target.files[0]);\n  }\n\n  async function saveProductButtonClick() {\n    try {\n      setLoading(true);\n\n      if (Object.values(productInputs).includes('')) {\n        toast({\n          title: 'Alert!',\n          description: 'Tolong isi semua field',\n          position: 'top',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n\n      const productImageFileBody = new FormData();\n\n      productImageFileBody.append('productImageFile', productImageFile);\n\n      const config = {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      };\n\n      const resAddProduct = await axiosInstance.post(\n        '/products/newProduct',\n        productInputs,\n      );\n\n      const extName = productInputs.productImage.split('.');\n\n      await axiosInstance.post(\n        `/products/newProductImage/${resAddProduct.data.resCreateProduct.product_id}.${extName[1]}`,\n        productImageFileBody,\n        config,\n      );\n\n      if (resAddProduct) {\n        setLoading(false);\n        setAddProductButton(false);\n      }\n    } catch (error) {\n      toast({\n        title: 'Add Product Failed!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      console.log({ error });\n      setLoading(false);\n      setAddProductButton(false);\n    }\n  }\n\n  function categoriesMap() {\n    return categoriesLists?.map((category) => {\n      return (\n        <option\n          key={category.category_lists_id}\n          value={`${category.category_lists_id}=-=${category.category}`}\n        >\n          {category.category}\n        </option>\n      );\n    });\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        setAddProductButton(false);\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Tambah Produk</ModalHeader>\n        <ModalBody>\n          <p>Foto</p>\n          <div className=\"w-[35%] my-[.5vh] hover:cursor-pointer\">\n            <label className=\"hover:cursor-pointer\" htmlFor=\"productImageInput\">\n              <Image\n                unoptimized\n                style={{ borderRadius: '.3vw' }}\n                src={newProductImage}\n                width={1}\n                height={1}\n                layout=\"responsive\"\n              />\n            </label>\n          </div>\n          <input\n            onChange={handleImageChange}\n            className=\"hidden\"\n            id=\"productImageInput\"\n            type=\"file\"\n          />\n          <Input\n            value={productInputs.productName}\n            onChange={handleChange('productName')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Nama Produk\"\n          />\n          <div className=\"flex justify-between my-[.5vh]\">\n            <Select\n              value={productInputs.categoryInfo}\n              onChange={handleChange('categoryInfo')}\n              size=\"lg\"\n              width={'55%'}\n              placeholder=\"Kategori\"\n            >\n              {categoriesMap()}\n            </Select>\n            <Button\n              onClick={() => {\n                router.replace('/admin/category');\n              }}\n              size=\"lg\"\n            >\n              Tambah +\n            </Button>\n          </div>\n          <Input\n            type={'number'}\n            value={productInputs.productPrice}\n            onChange={handleChange('productPrice')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Harga\"\n          />\n          <Input\n            value={productInputs.packageType}\n            onChange={handleChange('packageType')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Kemasan\"\n          />\n          <Input\n            value={productInputs.servingType}\n            onChange={handleChange('servingType')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Unit Satuan\"\n          />\n          <Input\n            type={'number'}\n            value={productInputs.defaultQuantity}\n            onChange={handleChange('defaultQuantity')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Jumlah Per Kemasan\"\n          />\n          <Textarea\n            onChange={handleChange('description')}\n            value={productInputs.description}\n            placeholder=\"Description\"\n            size=\"lg\"\n            height=\"11vh\"\n            resize=\"none\"\n          />\n        </ModalBody>\n\n        <ModalFooter justifyContent=\"space-between\">\n          <div className=\"flex w-[50%] justify-evenly\">\n            <Button colorScheme=\"linkedin\" variant=\"ghost\" disabled>\n              {'<'}\n            </Button>\n\n            <Input\n              value={productStock}\n              disabled\n              className=\"w-[2.5vw] mx-[1vw] flex items-center justify-center bg-gray-200 rounded-[.2vw]\"\n            />\n\n            <Button colorScheme=\"linkedin\" variant=\"ghost\" disabled>\n              {'>'}\n            </Button>\n          </div>\n\n          <div className=\"flex w-[50%] justify-end\">\n            <Button\n              style={{ width: '40%', marginRight: '.3vw' }}\n              isLoading={loading}\n              colorScheme=\"linkedin\"\n              onClick={() => {\n                saveProductButtonClick();\n              }}\n            >\n              Simpan\n            </Button>\n            <Button\n              style={{ width: '40%' }}\n              onClick={() => {\n                setAddProductButton(false);\n                setProductInputs({\n                  categoryInfo: '',\n                  description: '',\n                  packageType: '',\n                  productImage: '',\n                  productName: '',\n                  productPrice: '',\n                  productStock: '',\n                  defaultQuantity: '',\n                  servingType: '',\n                });\n              }}\n              variant=\"ghost\"\n            >\n              Batal\n            </Button>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default AddProductModal;\n","/Users/mac/Documents/Medbox-Client/components/AddProductStock/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminDetailTrans/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminNavbar/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminPaymentConfirm/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminPaymentDetails/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminPrescripCard/index.js",["375"],[],"import {\n  Box,\n  HStack,\n  Text,\n  VStack,\n  Button,\n  Icon,\n  Select,\n} from '@chakra-ui/react';\nimport { CheckIcon, SmallCloseIcon } from '@chakra-ui/icons';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { api_origin } from '../../constraint';\nimport { useState, useEffect } from 'react';\nimport axiosInstance from '../../src/config/api';\nimport { useToast } from '@chakra-ui/react';\n\nexport default function AdminPrescripCard(props) {\n  const {\n    trans_id,\n    deliveryCost,\n    prescriptionImage,\n    createdAt,\n    products,\n    userId,\n  } = props;\n  const [show, setShow] = useState(false);\n  const [option, setOption] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const toast = useToast();\n\n  useEffect(() => {\n    onCheckClick;\n  }, [saved]);\n\n  function productNameMap() {\n    return products.map((product) => {\n      if (product.formula) {\n        return (\n          <option key={product.product_id} value={`${product.product_id}`}>\n            {product.productName}\n          </option>\n        );\n      }\n    });\n  }\n\n  const onHandleOptionChange = (e) => {\n    setOption(e.target.value);\n  };\n\n  async function onCheckClick() {\n    try {\n      setLoading(true);\n      const parsedProduct_id = parseInt(option);\n      const body = {\n        product_id: parsedProduct_id,\n        transaction_id: trans_id,\n        user_id: userId,\n        // totalPrice: products.productPrice,\n      };\n      const res = await axiosInstance.patch('/transactions/adminConfirm', body);\n      if (res) {\n        toast({\n          title: 'Prescription Confirmed!',\n          description: res.data.message,\n          position: 'top',\n          status: 'success',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        setOption('');\n        setTimeout(() => {\n          window.location.reload();\n        }, 3000);\n      }\n    } catch (error) {\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setLoading(false);\n      setOption('');\n    }\n  }\n\n  return (\n    <Box marginTop={3}>\n      <Text fontWeight={600} marginBottom={1} marginLeft={'81'}>\n        No. Invoice: {trans_id}\n      </Text>\n      <HStack\n        bg={'gray.50'}\n        height={125}\n        spacing=\"5vH\"\n        marginBottom={3}\n        ml={'70'}\n        px={8}\n        rounded={6}\n        boxShadow=\"md\"\n      >\n        <Image\n          unoptimized\n          alt=\"resep-logo\"\n          width={70}\n          height={70}\n          src={api_origin + prescriptionImage}\n        />\n        <VStack>\n          <Text w=\"25vH\" fontSize={16} fontWeight={600}>\n            Resep Dokter\n          </Text>\n        </VStack>\n        <Text w=\"30vH\" fontSize=\"15\" fontWeight={500}>\n          Biaya Pengiriman: Rp {deliveryCost.toLocaleString('id')}\n        </Text>\n        <VStack textAlign=\"center\" fontWeight={500}>\n          <Text w=\"35vH\" fontSize=\"14\">\n            Tanggal Pemesanan:\n          </Text>\n          <Text w=\"37vH\" fontSize=\"13\">\n            {createdAt.slice(0, 10)}\n          </Text>\n        </VStack>\n        {show ? (\n          <HStack>\n            <Select\n              fontSize={'md'}\n              placeholder=\"pilih obat racik\"\n              variant={'flushed'}\n              onChange={onHandleOptionChange}\n            >\n              {productNameMap()}\n            </Select>\n            {option ? (\n              <Button\n                color=\"green.300\"\n                variant=\"ghost\"\n                fontSize={13}\n                fontWeight={500}\n                onClick={onCheckClick}\n              >\n                <CheckIcon></CheckIcon>\n              </Button>\n            ) : (\n              <></>\n            )}\n            <Button\n              color=\"red.300\"\n              variant=\"ghost\"\n              fontSize={13}\n              fontWeight={500}\n              onClick={() => {\n                setShow(false), setOption('');\n              }}\n            >\n              <SmallCloseIcon></SmallCloseIcon>\n            </Button>\n          </HStack>\n        ) : (\n          <Button\n            color=\"linkedin.500\"\n            variant=\"link\"\n            paddingRight={95}\n            fontSize={13}\n            fontWeight={500}\n            onClick={() => {\n              setShow(true), setOption('');\n            }}\n          >\n            <Text w=\"11vH\" fontSize=\"16\" fontWeight={600}>\n              Tambah Obat\n            </Text>\n          </Button>\n        )}\n      </HStack>\n    </Box>\n  );\n}\n","/Users/mac/Documents/Medbox-Client/components/AdminTransCard/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/AdminTransCardConfirmation/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/CartCards/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/DeleteAddedStock/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/DeleteAddress/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/EditAddress/index.js",["376"],[],"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Input,\n  Select,\n  Text,\n  VStack,\n  useToast,\n} from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { getSession } from 'next-auth/react';\nimport axiosInstance from '../../src/config/api';\n\nfunction EditAddress(props) {\n  const {\n    isOpen,\n    onClose,\n    address_id,\n    RenderUserAddresses,\n    editAddressDetail,\n    editRecipient,\n    editPostalCode,\n  } = props;\n  const [userAddress, setUserAddress] = useState('');\n  const [getProvince, setGetProvince] = useState([]);\n  const [getCity, setGetCity] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n\n  const splitProvince = selectedProvince.split(',');\n  const province_id = splitProvince[0];\n  const province = splitProvince[1];\n\n  const splitCity = selectedCity.split(',');\n  const city_id = splitCity[0];\n  const city_name = splitCity[1];\n\n  const toast = useToast();\n\n  const {\n    recipient = editRecipient,\n    addressDetail = editAddressDetail,\n    postalCode = editPostalCode,\n  } = userAddress;\n\n  useEffect(() => {\n    fetchProvince();\n  }, []);\n\n  useEffect(() => {\n    if (selectedProvince) {\n      fetchCity();\n    }\n  }, [selectedProvince]);\n\n  const onEditAddress = async () => {\n    try {\n      const session = await getSession();\n\n      const { user_token } = session.user;\n\n      const config = {\n        headers: { Authorization: `Bearer ${user_token}` },\n      };\n\n      const body = {\n        recipient,\n        province_id,\n        province,\n        city_id,\n        city_name,\n        addressDetail,\n        postalCode,\n      };\n\n      const res = await axiosInstance.patch(\n        `/addresses/update/${address_id}`,\n        body,\n        config,\n      );\n\n      toast({\n        description: res.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      RenderUserAddresses();\n    } catch (error) {\n      console.log({ error });\n      toast({\n        description: 'Semua Field Harus Terisi',\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const onHandleChange = (e) => {\n    setUserAddress({ ...userAddress, [e.target.name]: e.target.value });\n  };\n\n  const onHandleChangeProvince = (e) => {\n    setSelectedProvince(e.target.value);\n  };\n\n  const onHandleChangeCity = (e) => {\n    setSelectedCity(e.target.value);\n  };\n\n  const renderProvince = () => {\n    return getProvince.map((province) => (\n      <option\n        key={province.province_id}\n        value={`${province.province_id},${province.province}`}\n      >\n        {province.province}\n      </option>\n    ));\n  };\n\n  const renderCity = () => {\n    return getCity.map((city) => (\n      <option key={city.city_id} value={`${city.city_id},${city.city_name}`}>\n        {city.city_name}\n      </option>\n    ));\n  };\n\n  const fetchProvince = async () => {\n    try {\n      const resGetProvince = await axiosInstance.get('/rajaongkir/provinsi');\n      setGetProvince(resGetProvince.data.rajaongkir.results);\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  const fetchCity = async () => {\n    try {\n      const resGetCity = await axiosInstance.get(\n        `/rajaongkir/kota/${selectedProvince}`,\n      );\n      setGetCity(resGetCity.data.rajaongkir.results);\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent\n        backgroundColor=\"white\"\n        padding={{ md: '4' }}\n        paddingY={{ base: '3' }}\n        marginX={{ base: '4' }}\n      >\n        <ModalHeader fontWeight={600} fontSize={{ base: '16', md: '19' }}>\n          Ubah Alamat\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack\n            align=\"start\"\n            fontSize={{ base: '14', md: '15' }}\n            fontWeight={500}\n          >\n            <Text paddingTop={2}>Penerima</Text>\n            <Input\n              _focusVisible\n              name=\"recipient\"\n              type=\"text\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={recipient}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n            <Text>Provinsi</Text>\n            <Select\n              _focusVisible\n              name=\"province_id\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              placeholder=\"Pilih Provinsi\"\n              variant=\"filled\"\n              onChange={onHandleChangeProvince}\n            >\n              {renderProvince()}\n            </Select>\n            <Text paddingTop={2}>Kota</Text>\n            {getCity && (\n              <Select\n                _focusVisible\n                name=\"city_id\"\n                fontSize={{ base: '13', md: '14' }}\n                fontWeight={400}\n                placeholder=\"Pilih Kota\"\n                variant=\"filled\"\n                onChange={onHandleChangeCity}\n                mb={3}\n              >\n                {renderCity()}\n              </Select>\n            )}\n            <Text paddingTop={2}>Detail Alamat</Text>\n            <Input\n              _focusVisible\n              name=\"addressDetail\"\n              type=\"text\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={addressDetail}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n            <Text paddingTop={2}>Kode Pos</Text>\n            <Input\n              _focusVisible\n              name=\"postalCode\"\n              type=\"number\"\n              fontSize={{ base: '13', md: '14' }}\n              fontWeight={400}\n              value={postalCode}\n              variant=\"filled\"\n              mb={3}\n              onChange={onHandleChange}\n            />\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            height={9}\n            fontSize={15}\n            fontWeight={500}\n            colorScheme=\"messenger\"\n            onClick={() => {\n              onEditAddress(userAddress), onClose();\n            }}\n          >\n            Simpan\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default EditAddress;\n","/Users/mac/Documents/Medbox-Client/components/GetDeliveryCost/index.js",["377"],[],"import { useEffect, useState } from 'react';\nimport axiosInstance from '../../src/config/api';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Select,\n  FormLabel,\n  FormControl,\n  VStack,\n  useToast,\n} from '@chakra-ui/react';\n\nfunction GetDeliveryCost(props) {\n  const { isOpen, onClose, setSelectedDeliveryCost, setSelectedCourier } =\n    props;\n  const [choosedCourier, setChoosedCourier] = useState('');\n  const [choosedService, setChoosedService] = useState('');\n  const [deliveryCost, setDeliveryCost] = useState([]);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    if (choosedCourier) {\n      getDeliveryCost();\n    }\n  }, [choosedCourier]);\n\n  const onHandleChangeCourier = (e) => {\n    setChoosedCourier(e.target.value);\n  };\n\n  const onHandleChangeService = (e) => {\n    setChoosedService(e.target.value);\n  };\n\n  const getDeliveryCost = async () => {\n    try {\n      const origin = '153';\n      const destination = props.destination;\n      const weight = 1000;\n      const courier = choosedCourier;\n\n      const resGetDeliveryCost = await axiosInstance.get(\n        `rajaongkir/ongkos/${origin}/${destination}/${weight}/${courier}`,\n      );\n      setDeliveryCost(resGetDeliveryCost.data.rajaongkir.results[0].costs);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const renderDeliveryCost = () => {\n    return deliveryCost.map((deliveryCost) => (\n      <option\n        key={deliveryCost.service}\n        value={`${deliveryCost.service},${deliveryCost.cost[0].value}`}\n      >\n        {`${deliveryCost.description} (${deliveryCost.service}), Biaya Pengiriman: ${deliveryCost.cost[0].value}`}\n      </option>\n    ));\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent backgroundColor=\"white\" padding={5} maxWidth={600}>\n        <ModalHeader fontWeight={600} fontSize={19}>\n          Pilih Jenis Pengiriman\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack align=\"start\" fontSize={15} fontWeight={500}>\n            <VStack>\n              <FormControl>\n                <FormLabel fontSize={'sm'}>Kurir Pengiriman</FormLabel>\n                <Select\n                  _focusVisible\n                  name=\"courier\"\n                  fontSize={{ base: '13', md: '14' }}\n                  fontWeight={400}\n                  placeholder=\"Pilih Kurir\"\n                  variant=\"filled\"\n                  width={510}\n                  onChange={onHandleChangeCourier}\n                >\n                  <option value=\"jne\">JNE</option>\n                  <option value=\"tiki\">TIKI</option>\n                  <option value=\"pos\">POS Indonesia</option>\n                </Select>\n              </FormControl>\n            </VStack>\n            <VStack paddingTop={3}>\n              <FormControl>\n                <FormLabel fontSize={'sm'}>Jenis Pengiriman</FormLabel>\n                <Select\n                  _focusVisible\n                  name=\"deliveryCost\"\n                  fontSize={14}\n                  fontWeight={400}\n                  placeholder=\"Pilih Jenis Pengiriman\"\n                  variant=\"filled\"\n                  width={510}\n                  onChange={onHandleChangeService}\n                >\n                  {renderDeliveryCost()}\n                </Select>\n              </FormControl>\n            </VStack>\n          </VStack>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            height={9}\n            fontSize={15}\n            fontWeight={500}\n            colorScheme=\"messenger\"\n            onClick={() => {\n              setSelectedCourier(choosedCourier);\n              setSelectedDeliveryCost(choosedService);\n              toast({\n                description: 'Select Delivery Method Success',\n                position: 'top',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n              });\n              onClose();\n            }}\n          >\n            Submit\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default GetDeliveryCost;\n","/Users/mac/Documents/Medbox-Client/components/Navbar/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/SelectAddress/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/TransDetailCard/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/TransactionCards/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/UpdateAddedStock/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/adminProductDetails/index.js",["378","379"],[],"import React, { useEffect } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport axiosInstance from '../../src/config/api';\nimport { api_origin } from '../../constraint';\n\nfunction AdminProductDetails({\n  currentProduct,\n  openProductDetails,\n  setOpenProductDetails,\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const {\n    productName,\n    description,\n    isPublic,\n    category,\n    packageType,\n    productImage,\n    productPrice,\n    defaultQuantity,\n    productStock,\n    product_id,\n    servingType,\n    createdAt,\n    updatedAt,\n  } = currentProduct;\n\n  useEffect(() => {\n    if (openProductDetails) {\n      onOpen();\n    } else if (!openProductDetails) {\n      onClose();\n    }\n  }, [openProductDetails]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        setOpenProductDetails(false);\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Produk: {productName}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <p>Foto</p>\n          <div className=\"w-[35%] my-[.1vh] hover:cursor-not-allowed\">\n            <label\n              className=\"hover:cursor-not-allowed\"\n              htmlFor=\"productImageInput\"\n            >\n              <Image\n                unoptimized\n                style={{ borderRadius: '.3vw' }}\n                src={\n                  productImage.includes(api_origin)\n                    ? productImage\n                    : api_origin + productImage\n                }\n                width={1}\n                height={1}\n                layout=\"responsive\"\n                loader={() => {\n                  return productImage.includes(api_origin)\n                    ? productImage\n                    : api_origin + productImage;\n                }}\n              />\n            </label>\n          </div>\n          Kategori\n          <Input\n            disabled\n            backgroundColor=\"gray.300\"\n            value={category}\n            size=\"lg\"\n            marginY=\".1vh\"\n            placeholder=\"Kategori\"\n          />\n          Harga\n          <Input\n            disabled\n            backgroundColor=\"gray.300\"\n            value={productPrice}\n            size=\"lg\"\n            marginY=\".1vh\"\n            placeholder=\"Harga\"\n          />\n          Kemasan\n          <Input\n            disabled\n            backgroundColor=\"gray.300\"\n            value={packageType}\n            size=\"lg\"\n            marginY=\".1vh\"\n            placeholder=\"Kemasan\"\n          />\n          Satuan Unit\n          <Input\n            disabled\n            backgroundColor=\"gray.300\"\n            value={servingType}\n            size=\"lg\"\n            marginY=\".1vh\"\n            placeholder=\"Unit Satuan\"\n          />\n          Default Quantity\n          <Input\n            disabled\n            backgroundColor=\"gray.300\"\n            value={defaultQuantity}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Jumlah Per Kemasan\"\n          />\n          Deskripsi\n          <Textarea\n            disabled\n            backgroundColor=\"gray.300\"\n            value={description}\n            placeholder=\"Description\"\n            size=\"lg\"\n            height=\"11vh\"\n            resize=\"none\"\n          />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default AdminProductDetails;\n","/Users/mac/Documents/Medbox-Client/components/editCategoryModal/index.js",["380","381"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport axiosInstance from '../../src/config/api';\nimport { api_origin } from '../.././constraint';\nfunction EditCategoryModal({\n  editCategoryButton,\n  setEditCategoryButton,\n  currentCategory,\n}) {\n  const [newCategory, setNewCategory] = useState({\n    category: currentCategory.category,\n    categoryImage: currentCategory.categoryImage,\n  });\n  const [categoryImageFile, setCategoryImageFile] = useState();\n  const [newCategoryImage, setNewCategoryImage] = useState(\n    currentCategory.categoryImage,\n  );\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (editCategoryButton) {\n      onOpen();\n    } else if (!editCategoryButton) {\n      onClose();\n    }\n\n    setNewCategory({\n      category: currentCategory.category,\n      categoryImage: currentCategory.categoryImage,\n    });\n    setNewCategoryImage(currentCategory.categoryImage);\n  }, [editCategoryButton]);\n\n  async function updateCategoryClick() {\n    try {\n      setLoading(true);\n      if (\n        Object.values(newCategory).includes('') ||\n        Object.values(newCategory).includes(undefined)\n      ) {\n        toast({\n          description: 'Tolong Isi Semua',\n          position: 'top',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n      const categoryImageFileBody = new FormData();\n\n      categoryImageFileBody.append('categoriesImage', categoryImageFile);\n\n      const config = {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      };\n\n      const resPatchCategory = await axiosInstance.patch(\n        `/categoriesLists/categoryUpdate/${currentCategory.category_lists_id}`,\n        {\n          newCategory,\n          currentCategory,\n        },\n      );\n\n      const extName = newCategory.categoryImage.split('.');\n\n      const resPatchCategoryImage = await axiosInstance.post(\n        `/categoriesLists/upload/${resPatchCategory.data.data.resUpdateCategoryList.category_lists_id}.${extName[1]}`,\n        categoryImageFileBody,\n        config,\n      );\n\n      if (resPatchCategory) {\n        setEditCategoryButton(false);\n      }\n      toast({\n        description: resPatchCategory.data.message,\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      setLoading(false);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setLoading(false);\n      setEditCategoryButton(false);\n    }\n  }\n\n  function handleImageChange(event) {\n    setNewCategoryImage(URL.createObjectURL(event.target.files[0]));\n    setNewCategory({\n      ...newCategory,\n      categoryImage: event.target.files[0].name,\n    });\n    setCategoryImageFile(event.target.files[0]);\n  }\n\n  const handleChange = (prop) => (event) => {\n    setNewCategory({ ...newCategory, [prop]: event.target.value });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        setEditCategoryButton(false);\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Ubah Category</ModalHeader>\n        <ModalBody>\n          <p>Foto</p>\n          <div className=\"w-[35%] my-[.5vh] hover:cursor-pointer\">\n            <label\n              className=\"hover:cursor-pointer\"\n              htmlFor=\"categoryImageInput\"\n            >\n              <Image\n                unoptimized\n                src={\n                  newCategoryImage.includes(api_origin.slice(0, 16))\n                    ? newCategoryImage\n                    : api_origin + newCategoryImage\n                }\n                style={{ borderRadius: '.3vw' }}\n                width={1}\n                height={1}\n                layout=\"responsive\"\n              />\n            </label>\n          </div>\n          <input\n            onChange={handleImageChange}\n            className=\"hidden\"\n            id=\"categoryImageInput\"\n            type=\"file\"\n          />\n          <Input\n            value={newCategory.category}\n            onChange={handleChange('category')}\n            placeholder=\"Category\"\n            size=\"lg\"\n            height=\"11vh\"\n            resize=\"none\"\n          />\n        </ModalBody>\n        <ModalFooter justifyContent=\"space-between\">\n          <div className=\"flex w-[50%] justify-end\">\n            <Button\n              style={{ width: '40%', marginRight: '.3vw' }}\n              colorScheme=\"linkedin\"\n              isLoading={loading}\n              onClick={() => {\n                updateCategoryClick();\n              }}\n            >\n              Simpan\n            </Button>\n            <Button\n              style={{ width: '40%' }}\n              onClick={() => {\n                setEditCategoryButton(false);\n                setNewCategory({\n                  category: '',\n                });\n              }}\n              variant=\"ghost\"\n            >\n              Batal\n            </Button>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default EditCategoryModal;\n","/Users/mac/Documents/Medbox-Client/components/editProductModal/index.js",["382","383"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport Image from 'next/image';\nimport axiosInstance from '../../src/config/api';\nimport { api_origin } from '../../constraint';\nimport { useRouter } from 'next/router';\n\nfunction EditProductModal({\n  currentProduct,\n  editProductButton,\n  setEditProductButton,\n  categoriesLists,\n  productList,\n  setProductList,\n}) {\n  const [productStock, setProductStock] = useState(currentProduct.productStock);\n  const [loading, setLoading] = useState(false);\n  const [productImageFile, setProductImageFile] = useState();\n  const [productInputs, setProductInputs] = useState({\n    categoryInfo: `${currentProduct.category_lists_id}=-=${currentProduct.category}`,\n    description: currentProduct.description,\n    packageType: currentProduct.packageType,\n    productImage: currentProduct.productImage,\n    productName: currentProduct.productName,\n    productPrice: currentProduct.productPrice,\n    productStock: currentProduct.productStock,\n    defaultQuantity: currentProduct.defaultQuantity,\n    servingType: currentProduct.servingType,\n  });\n  const [newProductImage, setNewProductImage] = useState(\n    currentProduct.productImage,\n  );\n  const router = useRouter();\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    if (editProductButton) {\n      onOpen();\n    } else if (!editProductButton) {\n      onClose();\n    }\n\n    setProductInputs({\n      categoryInfo: currentProduct.category_lists_id\n        ? `${currentProduct.category_lists_id}=-=${currentProduct.category}`\n        : undefined,\n      description: currentProduct.description,\n      packageType: currentProduct.packageType,\n      productImage: currentProduct.productImage,\n      productName: currentProduct.productName,\n      productPrice: currentProduct.productPrice,\n      productStock,\n      defaultQuantity: currentProduct.defaultQuantity,\n      servingType: currentProduct.servingType,\n    });\n    setNewProductImage(currentProduct.productImage);\n  }, [editProductButton, productStock]);\n\n  useEffect(() => {\n    setProductStock(currentProduct.productStock);\n  }, [currentProduct]);\n\n  async function updateProductClick() {\n    try {\n      setLoading(true);\n\n      if (Object.values(productInputs).includes('' || undefined)) {\n        toast({\n          title: 'Warning!',\n          description: 'Tolong isi semua field',\n          position: 'top',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n\n      const productImageFileBody = new FormData();\n\n      productImageFileBody.append('productImageFile', productImageFile);\n\n      const config = {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      };\n\n      const resAddProduct = await axiosInstance.patch(\n        `/products/productsUpdate/${currentProduct.product_id}`,\n        {\n          productInputs,\n          currentProduct,\n        },\n      );\n\n      const extName = productInputs.productImage.split('.');\n\n      await axiosInstance.post(\n        `/products/newProductImage/${resAddProduct.data.resUpdateProduct.product_id}.${extName[1]}`,\n        productImageFileBody,\n        config,\n      );\n\n      toast({\n        title: 'Success!',\n        description: 'Success edit product',\n        position: 'top',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      setLoading(false);\n      setEditProductButton(false);\n    } catch (error) {\n      console.log({ error });\n      toast({\n        title: 'Unexpected Fail!',\n        description: error.response.data?.message\n          ? error.response.data.message\n          : error.message,\n        position: 'top',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      setLoading(false);\n    }\n  }\n\n  function categoriesMap() {\n    return categoriesLists.map((category) => {\n      return (\n        <option\n          key={category.category_lists_id}\n          value={`${category.category_lists_id}=-=${category.category}`}\n        >\n          {category.category}\n        </option>\n      );\n    });\n  }\n\n  function handleImageChange(event) {\n    setNewProductImage(URL.createObjectURL(event.target.files[0]));\n    setProductInputs({\n      ...productInputs,\n      productImage: event.target.files[0].name,\n    });\n    setProductImageFile(event.target.files[0]);\n  }\n\n  const handleChange = (prop) => (event) => {\n    setProductInputs({ ...productInputs, [prop]: event.target.value });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        setEditProductButton(false);\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Edit {currentProduct.productName}</ModalHeader>\n        <ModalBody>\n          <p>Foto</p>\n          <div className=\"w-[35%] my-[.5vh] hover:cursor-pointer\">\n            <label className=\"hover:cursor-pointer\" htmlFor=\"productImageInput\">\n              <Image\n                unoptimized\n                style={{ borderRadius: '.3vw' }}\n                src={\n                  newProductImage.includes('localhost')\n                    ? newProductImage\n                    : api_origin + newProductImage\n                }\n                width={1}\n                height={1}\n                layout=\"responsive\"\n                loader={() => {\n                  return newProductImage.includes(api_origin)\n                    ? newProductImage\n                    : api_origin + newProductImage;\n                }}\n              />\n            </label>\n          </div>\n          <input\n            onChange={handleImageChange}\n            className=\"hidden\"\n            id=\"productImageInput\"\n            type=\"file\"\n          />\n          <Input\n            value={productInputs.productName}\n            onChange={handleChange('productName')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Nama Produk\"\n          />\n          <div className=\"flex justify-between my-[.5vh]\">\n            <Select\n              value={productInputs.categoryInfo}\n              onChange={handleChange('categoryInfo')}\n              size=\"lg\"\n              width={'55%'}\n              placeholder=\"Kategori\"\n            >\n              {categoriesMap()}\n            </Select>\n            <Button\n              onClick={() => {\n                router.replace('/admin/category');\n              }}\n              size=\"lg\"\n            >\n              Tambah +\n            </Button>\n          </div>\n          <Input\n            type={'number'}\n            value={productInputs.productPrice}\n            onChange={handleChange('productPrice')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Harga\"\n          />\n          <Input\n            value={productInputs.packageType}\n            onChange={handleChange('packageType')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Kemasan\"\n          />\n          <Input\n            value={productInputs.servingType}\n            onChange={handleChange('servingType')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Unit Satuan\"\n          />\n          <Input\n            type={'number'}\n            value={productInputs.defaultQuantity}\n            onChange={handleChange('defaultQuantity')}\n            size=\"lg\"\n            marginY=\".5vh\"\n            placeholder=\"Jumlah Per Kemasan\"\n          />\n          <Textarea\n            onChange={handleChange('description')}\n            value={productInputs.description}\n            placeholder=\"Description\"\n            size=\"lg\"\n            height=\"11vh\"\n            resize=\"none\"\n          />\n        </ModalBody>\n\n        <ModalFooter justifyContent=\"space-between\">\n          <div className=\"flex w-[50%] justify-evenly\">\n            <Button colorScheme=\"linkedin\" variant=\"ghost\" disabled>\n              {'<'}\n            </Button>\n\n            <Input\n              disabled\n              value={productStock}\n              className=\"w-[2.5vw] mx-[1vw] flex items-center justify-center bg-gray-200 rounded-[.2vw]\"\n            />\n\n            <Button colorScheme=\"linkedin\" variant=\"ghost\" disabled>\n              {'>'}\n            </Button>\n          </div>\n          <div className=\"flex w-[50%] justify-end\">\n            <Button\n              style={{ width: '40%', marginRight: '.3vw' }}\n              isLoading={loading}\n              colorScheme=\"linkedin\"\n              onClick={() => {\n                updateProductClick();\n              }}\n            >\n              Update\n            </Button>\n            <Button\n              style={{ width: '40%' }}\n              onClick={() => {\n                setEditProductButton(false);\n                setProductInputs({\n                  categoryInfo: '',\n                  description: '',\n                  packageType: '',\n                  productImage: '',\n                  productName: '',\n                  productPrice: '',\n                  productStock: '',\n                  defaultQuantity: '',\n                  servingType: '',\n                });\n              }}\n              variant=\"ghost\"\n            >\n              Batal\n            </Button>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default EditProductModal;\n","/Users/mac/Documents/Medbox-Client/components/textFieldProfile/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/textfield/index.js",[],[],"/Users/mac/Documents/Medbox-Client/components/theme/index.js",[],[],"/Users/mac/Documents/Medbox-Client/src/config/api.js",[],[],{"ruleId":"384","severity":1,"message":"385","line":14,"column":11,"nodeType":"386","endLine":17,"endColumn":13},{"ruleId":"387","severity":1,"message":"388","line":41,"column":6,"nodeType":"389","endLine":41,"endColumn":26,"suggestions":"390"},{"ruleId":"387","severity":1,"message":"391","line":35,"column":3,"nodeType":"392","endLine":35,"endColumn":12,"suggestions":"393"},{"ruleId":"387","severity":1,"message":"394","line":8,"column":6,"nodeType":"389","endLine":8,"endColumn":8,"suggestions":"395"},{"ruleId":"387","severity":1,"message":"396","line":45,"column":3,"nodeType":"392","endLine":45,"endColumn":12,"suggestions":"397"},{"ruleId":"387","severity":1,"message":"398","line":39,"column":6,"nodeType":"389","endLine":39,"endColumn":34,"suggestions":"399"},{"ruleId":"387","severity":1,"message":"400","line":34,"column":6,"nodeType":"389","endLine":34,"endColumn":22,"suggestions":"401"},{"ruleId":"387","severity":1,"message":"402","line":50,"column":6,"nodeType":"389","endLine":50,"endColumn":22,"suggestions":"403"},{"ruleId":"387","severity":1,"message":"404","line":46,"column":6,"nodeType":"389","endLine":46,"endColumn":8,"suggestions":"405"},{"ruleId":"387","severity":1,"message":"406","line":50,"column":6,"nodeType":"389","endLine":50,"endColumn":8,"suggestions":"407"},{"ruleId":"408","severity":1,"message":"409","line":225,"column":11,"nodeType":"386","endLine":225,"endColumn":80},{"ruleId":"408","severity":1,"message":"409","line":360,"column":15,"nodeType":"386","endLine":360,"endColumn":73},{"ruleId":"387","severity":1,"message":"410","line":28,"column":6,"nodeType":"389","endLine":28,"endColumn":20,"suggestions":"411"},{"ruleId":"387","severity":1,"message":"412","line":39,"column":6,"nodeType":"389","endLine":39,"endColumn":15,"suggestions":"413"},{"ruleId":"387","severity":1,"message":"414","line":23,"column":3,"nodeType":"392","endLine":23,"endColumn":12,"suggestions":"415"},{"ruleId":"387","severity":1,"message":"416","line":35,"column":6,"nodeType":"389","endLine":35,"endColumn":8,"suggestions":"417"},{"ruleId":"387","severity":1,"message":"394","line":9,"column":6,"nodeType":"389","endLine":9,"endColumn":8,"suggestions":"418"},{"ruleId":"408","severity":1,"message":"409","line":161,"column":19,"nodeType":"386","endLine":161,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":176,"column":13,"nodeType":"386","endLine":185,"endColumn":15},{"ruleId":"408","severity":1,"message":"409","line":196,"column":17,"nodeType":"386","endLine":196,"endColumn":78},{"ruleId":"408","severity":1,"message":"409","line":207,"column":13,"nodeType":"386","endLine":207,"endColumn":69},{"ruleId":"387","severity":1,"message":"406","line":46,"column":6,"nodeType":"389","endLine":46,"endColumn":8,"suggestions":"419"},{"ruleId":"408","severity":1,"message":"409","line":260,"column":19,"nodeType":"386","endLine":260,"endColumn":76},{"ruleId":"408","severity":1,"message":"409","line":275,"column":13,"nodeType":"386","endLine":285,"endColumn":15},{"ruleId":"408","severity":1,"message":"409","line":326,"column":19,"nodeType":"386","endLine":326,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":360,"column":19,"nodeType":"386","endLine":360,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":409,"column":19,"nodeType":"386","endLine":409,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":422,"column":27,"nodeType":"386","endLine":422,"endColumn":81},{"ruleId":"408","severity":1,"message":"409","line":431,"column":19,"nodeType":"386","endLine":431,"endColumn":77},{"ruleId":"408","severity":1,"message":"409","line":449,"column":17,"nodeType":"386","endLine":449,"endColumn":73},{"ruleId":"408","severity":1,"message":"409","line":479,"column":17,"nodeType":"386","endLine":479,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":491,"column":19,"nodeType":"386","endLine":491,"endColumn":75},{"ruleId":"408","severity":1,"message":"409","line":497,"column":25,"nodeType":"386","endLine":497,"endColumn":81},{"ruleId":"408","severity":1,"message":"409","line":509,"column":25,"nodeType":"386","endLine":513,"endColumn":27},{"ruleId":"408","severity":1,"message":"409","line":525,"column":25,"nodeType":"386","endLine":529,"endColumn":27},{"ruleId":"387","severity":1,"message":"402","line":31,"column":6,"nodeType":"389","endLine":31,"endColumn":22,"suggestions":"420"},{"ruleId":"408","severity":1,"message":"409","line":147,"column":15,"nodeType":"386","endLine":151,"endColumn":17},{"ruleId":"387","severity":1,"message":"406","line":51,"column":6,"nodeType":"389","endLine":51,"endColumn":8,"suggestions":"421"},{"ruleId":"408","severity":1,"message":"409","line":205,"column":17,"nodeType":"386","endLine":209,"endColumn":19},{"ruleId":"408","severity":1,"message":"409","line":218,"column":17,"nodeType":"386","endLine":226,"endColumn":19},{"ruleId":"408","severity":1,"message":"409","line":242,"column":21,"nodeType":"386","endLine":246,"endColumn":23},{"ruleId":"408","severity":1,"message":"409","line":262,"column":21,"nodeType":"386","endLine":266,"endColumn":23},{"ruleId":"408","severity":1,"message":"409","line":280,"column":21,"nodeType":"386","endLine":284,"endColumn":23},{"ruleId":"408","severity":1,"message":"409","line":299,"column":21,"nodeType":"386","endLine":303,"endColumn":23},{"ruleId":"408","severity":1,"message":"409","line":421,"column":15,"nodeType":"386","endLine":421,"endColumn":73},{"ruleId":"408","severity":1,"message":"409","line":450,"column":11,"nodeType":"386","endLine":454,"endColumn":13},{"ruleId":"387","severity":1,"message":"422","line":48,"column":6,"nodeType":"389","endLine":48,"endColumn":24,"suggestions":"423"},{"ruleId":"387","severity":1,"message":"424","line":37,"column":6,"nodeType":"389","endLine":37,"endColumn":34,"suggestions":"425"},{"ruleId":"408","severity":1,"message":"409","line":117,"column":15,"nodeType":"386","endLine":124,"endColumn":17},{"ruleId":"387","severity":1,"message":"426","line":49,"column":6,"nodeType":"389","endLine":49,"endColumn":55,"suggestions":"427"},{"ruleId":"387","severity":1,"message":"428","line":54,"column":6,"nodeType":"389","endLine":54,"endColumn":47,"suggestions":"429"},{"ruleId":"408","severity":1,"message":"409","line":155,"column":15,"nodeType":"386","endLine":162,"endColumn":17},{"ruleId":"387","severity":1,"message":"430","line":35,"column":6,"nodeType":"389","endLine":35,"endColumn":13,"suggestions":"431"},{"ruleId":"387","severity":1,"message":"422","line":60,"column":6,"nodeType":"389","endLine":60,"endColumn":24,"suggestions":"432"},{"ruleId":"387","severity":1,"message":"433","line":32,"column":6,"nodeType":"389","endLine":32,"endColumn":22,"suggestions":"434"},{"ruleId":"387","severity":1,"message":"435","line":49,"column":6,"nodeType":"389","endLine":49,"endColumn":26,"suggestions":"436"},{"ruleId":"408","severity":1,"message":"409","line":69,"column":15,"nodeType":"386","endLine":85,"endColumn":17},{"ruleId":"387","severity":1,"message":"437","line":49,"column":6,"nodeType":"389","endLine":49,"endColumn":26,"suggestions":"438"},{"ruleId":"408","severity":1,"message":"409","line":151,"column":15,"nodeType":"386","endLine":162,"endColumn":17},{"ruleId":"387","severity":1,"message":"439","line":72,"column":6,"nodeType":"389","endLine":72,"endColumn":39,"suggestions":"440"},{"ruleId":"408","severity":1,"message":"409","line":186,"column":15,"nodeType":"386","endLine":202,"endColumn":17},"@next/next/no-page-custom-font","Custom fonts not added in `pages/_document.js` will only load for a single page. This is discouraged. See: https://nextjs.org/docs/messages/no-page-custom-font","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStockOpname'. Either include it or remove the dependency array.","ArrayExpression",["441"],"React Hook useEffect contains a call to 'setCategoryList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [router.query, props.categoriesLists] as a second argument to the useEffect Hook.","Identifier",["442"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["443"],"React Hook useEffect contains a call to 'setProductList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.products, props.productsAll, params] as a second argument to the useEffect Hook.",["444"],"React Hook useEffect has a missing dependency: 'fetchNewWithFilter'. Either include it or remove the dependency array.",["445"],"React Hook useEffect has missing dependencies: 'fetchProducts' and 'fetchTransactions'. Either include them or remove the dependency array.",["446"],"React Hook useEffect has a missing dependency: 'fetchTransactions'. Either include it or remove the dependency array.",["447"],"React Hook useEffect has a missing dependency: 'fetchCarts'. Either include it or remove the dependency array.",["448"],"React Hook useEffect has a missing dependency: 'RenderUserAddresses'. Either include it or remove the dependency array.",["449"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["450"],"React Hook useEffect has a missing dependency: 'getSessionAsync'. Either include it or remove the dependency array.",["451"],"React Hook useEffect contains a call to 'setSelected'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [router.query, props.products] as a second argument to the useEffect Hook.",["452"],"React Hook useEffect has a missing dependency: 'router.query'. Either include it or remove the dependency array.",["453"],["454"],["455"],["456"],["457"],"React Hook useEffect has a missing dependency: 'fetchCity'. Either include it or remove the dependency array.",["458"],"React Hook useEffect has missing dependencies: 'category', 'onClose', and 'onOpen'. Either include them or remove the dependency array. You can also do a functional update 'setCategory(c => ...)' if you only need 'category' in the 'setCategory' call.",["459"],"React Hook useEffect has missing dependencies: 'checkSameProduct', 'onClose', and 'onOpen'. Either include them or remove the dependency array.",["460"],"React Hook useEffect has missing dependencies: 'onClose', 'onOpen', and 'productInputs'. Either include them or remove the dependency array. You can also do a functional update 'setProductInputs(p => ...)' if you only need 'productInputs' in the 'setProductInputs' call.",["461"],"React Hook useEffect has a missing dependency: 'onCheckClick'. Either include it or remove the dependency array.",["462"],["463"],"React Hook useEffect has a missing dependency: 'getDeliveryCost'. Either include it or remove the dependency array.",["464"],"React Hook useEffect has missing dependencies: 'onClose' and 'onOpen'. Either include them or remove the dependency array.",["465"],"React Hook useEffect has missing dependencies: 'currentCategory.category', 'currentCategory.categoryImage', 'onClose', and 'onOpen'. Either include them or remove the dependency array. If 'setNewCategory' needs the current value of 'currentCategory.category', you can also switch to useReducer instead of useState and read 'currentCategory.category' in the reducer.",["466"],"React Hook useEffect has missing dependencies: 'currentProduct.category', 'currentProduct.category_lists_id', 'currentProduct.defaultQuantity', 'currentProduct.description', 'currentProduct.packageType', 'currentProduct.productImage', 'currentProduct.productName', 'currentProduct.productPrice', 'currentProduct.servingType', 'onClose', and 'onOpen'. Either include them or remove the dependency array. If 'setProductInputs' needs the current value of 'currentProduct.category_lists_id', you can also switch to useReducer instead of useState and read 'currentProduct.category_lists_id' in the reducer.",["467"],{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"472","fix":"494"},{"desc":"484","fix":"495"},{"desc":"480","fix":"496"},{"desc":"484","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"498","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},"Update the dependencies array to be: [startDate, endDate, fetchStockOpname]",{"range":"517","text":"518"},"Add dependencies array: [router.query, props.categoriesLists]",{"range":"519","text":"520"},"Update the dependencies array to be: [router]",{"range":"521","text":"522"},"Add dependencies array: [props.products, props.productsAll, params]",{"range":"523","text":"524"},"Update the dependencies array to be: [params, startDate, endDate, fetchNewWithFilter]",{"range":"525","text":"526"},"Update the dependencies array to be: [selected, page, fetchTransactions, fetchProducts]",{"range":"527","text":"528"},"Update the dependencies array to be: [selected, page, fetchTransactions]",{"range":"529","text":"530"},"Update the dependencies array to be: [fetchCarts]",{"range":"531","text":"532"},"Update the dependencies array to be: [RenderUserAddresses]",{"range":"533","text":"534"},"Update the dependencies array to be: [fetchProducts, productsPage]",{"range":"535","text":"536"},"Update the dependencies array to be: [getSessionAsync, isLogin]",{"range":"537","text":"538"},"Add dependencies array: [router.query, props.products]",{"range":"539","text":"540"},"Update the dependencies array to be: [router.query]",{"range":"541","text":"542"},{"range":"543","text":"522"},{"range":"544","text":"534"},{"range":"545","text":"530"},{"range":"546","text":"534"},"Update the dependencies array to be: [fetchCity, selectedProvince]",{"range":"547","text":"548"},"Update the dependencies array to be: [addCategoryButton, category, loading, onClose, onOpen]",{"range":"549","text":"550"},"Update the dependencies array to be: [addFormulaButton, quantity, tempFormula, option, checkSameProduct, onOpen, onClose]",{"range":"551","text":"552"},"Update the dependencies array to be: [addProductButton, loading, onClose, onOpen, productInputs, productStock]",{"range":"553","text":"554"},"Update the dependencies array to be: [onCheckClick, saved]",{"range":"555","text":"556"},{"range":"557","text":"548"},"Update the dependencies array to be: [choosedCourier, getDeliveryCost]",{"range":"558","text":"559"},"Update the dependencies array to be: [onClose, onOpen, openProductDetails]",{"range":"560","text":"561"},"Update the dependencies array to be: [currentCategory.category, currentCategory.categoryImage, editCategoryButton, onClose, onOpen]",{"range":"562","text":"563"},"Update the dependencies array to be: [currentProduct.category, currentProduct.category_lists_id, currentProduct.defaultQuantity, currentProduct.description, currentProduct.packageType, currentProduct.productImage, currentProduct.productName, currentProduct.productPrice, currentProduct.servingType, editProductButton, onClose, onOpen, productStock]",{"range":"564","text":"565"},[1282,1302],"[startDate, endDate, fetchStockOpname]",[1214,1214],", [router.query, props.categoriesLists]",[204,206],"[router]",[1997,1997],", [props.products, props.productsAll, params]",[1090,1118],"[params, startDate, endDate, fetchNewWithFilter]",[944,960],"[selected, page, fetchTransactions, fetchProducts]",[1327,1343],"[selected, page, fetchTransactions]",[1559,1561],"[fetchCarts]",[1617,1619],"[RenderUserAddresses]",[809,823],"[fetchProducts, productsPage]",[900,909],"[getSessionAsync, isLogin]",[1063,1063],", [router.query, props.products]",[1254,1256],"[router.query]",[210,212],[1588,1590],[718,734],[1831,1833],[1166,1184],"[fetchCity, selectedProvince]",[927,955],"[addCategoryButton, category, loading, onClose, onOpen]",[1161,1210],"[addFormulaButton, quantity, tempFormula, option, checkSameProduct, onOpen, onClose]",[1279,1320],"[addProductButton, loading, onClose, onOpen, productInputs, productStock]",[834,841],"[onCheckClick, saved]",[1332,1350],[714,730],"[choosedCourier, getDeliveryCost]",[909,929],"[onClose, onOpen, openProductDetails]",[1249,1269],"[currentCategory.category, currentCategory.categoryImage, editCategoryButton, onClose, onOpen]",[2231,2264],"[currentProduct.category, currentProduct.category_lists_id, currentProduct.defaultQuantity, currentProduct.description, currentProduct.packageType, currentProduct.productImage, currentProduct.productName, currentProduct.productPrice, currentProduct.servingType, editProductButton, onClose, onOpen, productStock]"]